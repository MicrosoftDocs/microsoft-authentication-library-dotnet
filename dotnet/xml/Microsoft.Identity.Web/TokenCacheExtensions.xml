<Type Name="TokenCacheExtensions" FullName="Microsoft.Identity.Web.TokenCacheExtensions">
  <TypeSignature Language="C#" Value="public static class TokenCacheExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit TokenCacheExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Identity.Web.TokenCacheExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module TokenCacheExtensions" />
  <TypeSignature Language="F#" Value="type TokenCacheExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Identity.Web.TokenCache</AssemblyName>
    <AssemblyVersion>2.6.1.0</AssemblyVersion>
    <AssemblyVersion>2.7.0.0</AssemblyVersion>
    <AssemblyVersion>2.8.0.0</AssemblyVersion>
    <AssemblyVersion>2.9.0.0</AssemblyVersion>
    <AssemblyVersion>2.10.0.0</AssemblyVersion>
    <AssemblyVersion>2.11.0.0</AssemblyVersion>
    <AssemblyVersion>2.11.1.0</AssemblyVersion>
    <AssemblyVersion>2.12.4.0</AssemblyVersion>
    <AssemblyVersion>2.13.0.0</AssemblyVersion>
    <AssemblyVersion>2.13.1.0</AssemblyVersion>
    <AssemblyVersion>2.13.2.0</AssemblyVersion>
    <AssemblyVersion>2.13.3.0</AssemblyVersion>
    <AssemblyVersion>2.13.4.0</AssemblyVersion>
    <AssemblyVersion>2.14.0.0</AssemblyVersion>
    <AssemblyVersion>2.15.1.0</AssemblyVersion>
    <AssemblyVersion>2.15.2.0</AssemblyVersion>
    <AssemblyVersion>2.15.3.0</AssemblyVersion>
    <AssemblyVersion>2.15.5.0</AssemblyVersion>
    <AssemblyVersion>2.16.0.0</AssemblyVersion>
    <AssemblyVersion>2.16.1.0</AssemblyVersion>
    <AssemblyVersion>2.17.0.0</AssemblyVersion>
    <AssemblyVersion>2.17.1.0</AssemblyVersion>
    <AssemblyVersion>2.17.2.0</AssemblyVersion>
    <AssemblyVersion>2.17.3.0</AssemblyVersion>
    <AssemblyVersion>2.17.4.0</AssemblyVersion>
    <AssemblyVersion>2.17.5.0</AssemblyVersion>
    <AssemblyVersion>2.18.1.0</AssemblyVersion>
    <AssemblyVersion>2.18.2.0</AssemblyVersion>
    <AssemblyVersion>2.19.0.0</AssemblyVersion>
    <AssemblyVersion>2.19.1.0</AssemblyVersion>
    <AssemblyVersion>2.20.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.1.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>3.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.2.1.0</AssemblyVersion>
    <AssemblyVersion>3.2.2.0</AssemblyVersion>
    <AssemblyVersion>3.3.0.0</AssemblyVersion>
    <AssemblyVersion>3.3.1.0</AssemblyVersion>
    <AssemblyVersion>3.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Extension methods to expose a simplified developer experience for
            adding token caches to MSAL.NET confidential client applications
            in ASP.NET, or .NET Core, or .NET FW.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddDistributedTokenCache">
      <MemberSignature Language="C#" Value="public static Microsoft.Identity.Client.IConfidentialClientApplication AddDistributedTokenCache (this Microsoft.Identity.Client.IConfidentialClientApplication confidentialClientApp, Action&lt;Microsoft.Extensions.DependencyInjection.IServiceCollection&gt; initializeDistributedCache);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Identity.Client.IConfidentialClientApplication AddDistributedTokenCache(class Microsoft.Identity.Client.IConfidentialClientApplication confidentialClientApp, class System.Action`1&lt;class Microsoft.Extensions.DependencyInjection.IServiceCollection&gt; initializeDistributedCache) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Web.TokenCacheExtensions.AddDistributedTokenCache(Microsoft.Identity.Client.IConfidentialClientApplication,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDistributedTokenCache (confidentialClientApp As IConfidentialClientApplication, initializeDistributedCache As Action(Of IServiceCollection)) As IConfidentialClientApplication" />
      <MemberSignature Language="F#" Value="static member AddDistributedTokenCache : Microsoft.Identity.Client.IConfidentialClientApplication * Action&lt;Microsoft.Extensions.DependencyInjection.IServiceCollection&gt; -&gt; Microsoft.Identity.Client.IConfidentialClientApplication" Usage="Microsoft.Identity.Web.TokenCacheExtensions.AddDistributedTokenCache (confidentialClientApp, initializeDistributedCache)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Web.TokenCache</AssemblyName>
        <AssemblyVersion>3.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.IConfidentialClientApplication</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="confidentialClientApp" Type="Microsoft.Identity.Client.IConfidentialClientApplication" RefType="this" />
        <Parameter Name="initializeDistributedCache" Type="System.Action&lt;Microsoft.Extensions.DependencyInjection.IServiceCollection&gt;" />
      </Parameters>
      <Docs>
        <param name="confidentialClientApp">Confidential client application.</param>
        <param name="initializeDistributedCache">Action taking a <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
             and by which you initialize your distributed cache.</param>
        <summary>
             Add a distributed token cache.
             </summary>
        <returns>The application for chaining.</returns>
        <remarks>Don't use this method in ASP.NET Core. Just add use the ConfigureServices method
             instead.</remarks>
        <example>
             The following code adds a token cache based on REDIS and initializes
             its configuration.
            
             <code>
              app.AddDistributedTokenCache(services =&gt;
              {
                   // Redis token cache
                   // Requires to reference Microsoft.Extensions.Caching.StackExchangeRedis
                   services.AddStackExchangeRedisCache(options =&gt;
                   {
                       options.Configuration = "localhost";
                       options.InstanceName = "Redis";
                   });
              });
             </code></example>
      </Docs>
    </Member>
    <Member MemberName="AddInMemoryTokenCache">
      <MemberSignature Language="C#" Value="public static Microsoft.Identity.Client.IConfidentialClientApplication AddInMemoryTokenCache (this Microsoft.Identity.Client.IConfidentialClientApplication confidentialClientApp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Identity.Client.IConfidentialClientApplication AddInMemoryTokenCache(class Microsoft.Identity.Client.IConfidentialClientApplication confidentialClientApp) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Web.TokenCacheExtensions.AddInMemoryTokenCache(Microsoft.Identity.Client.IConfidentialClientApplication)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddInMemoryTokenCache (confidentialClientApp As IConfidentialClientApplication) As IConfidentialClientApplication" />
      <MemberSignature Language="F#" Value="static member AddInMemoryTokenCache : Microsoft.Identity.Client.IConfidentialClientApplication -&gt; Microsoft.Identity.Client.IConfidentialClientApplication" Usage="Microsoft.Identity.Web.TokenCacheExtensions.AddInMemoryTokenCache confidentialClientApp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Web.TokenCache</AssemblyName>
        <AssemblyVersion>3.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.IConfidentialClientApplication</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="confidentialClientApp" Type="Microsoft.Identity.Client.IConfidentialClientApplication" RefType="this" />
      </Parameters>
      <Docs>
        <param name="confidentialClientApp">Confidential client application.</param>
        <summary>
             Add an in-memory well partitioned token cache to MSAL.NET confidential client
             application. Don't use this method in ASP.NET Core: rather use:
             <code>services.AddInMemoryTokenCache()</code> in ConfigureServices.
             </summary>
        <returns>The application for chaining.</returns>
        <remarks>Don't use this method in ASP.NET Core. Just add use the ConfigureServices method
             instead.</remarks>
        <example>
            
             The following code adds an in-memory token cache.
            
             <code>
              app.AddInMemoryTokenCache();
             </code></example>
      </Docs>
    </Member>
    <Member MemberName="AddInMemoryTokenCache">
      <MemberSignature Language="C#" Value="public static Microsoft.Identity.Client.IConfidentialClientApplication AddInMemoryTokenCache (this Microsoft.Identity.Client.IConfidentialClientApplication confidentialClientApp, Action&lt;Microsoft.Extensions.DependencyInjection.IServiceCollection&gt; initializeMemoryCache);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Identity.Client.IConfidentialClientApplication AddInMemoryTokenCache(class Microsoft.Identity.Client.IConfidentialClientApplication confidentialClientApp, class System.Action`1&lt;class Microsoft.Extensions.DependencyInjection.IServiceCollection&gt; initializeMemoryCache) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Web.TokenCacheExtensions.AddInMemoryTokenCache(Microsoft.Identity.Client.IConfidentialClientApplication,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddInMemoryTokenCache (confidentialClientApp As IConfidentialClientApplication, initializeMemoryCache As Action(Of IServiceCollection)) As IConfidentialClientApplication" />
      <MemberSignature Language="F#" Value="static member AddInMemoryTokenCache : Microsoft.Identity.Client.IConfidentialClientApplication * Action&lt;Microsoft.Extensions.DependencyInjection.IServiceCollection&gt; -&gt; Microsoft.Identity.Client.IConfidentialClientApplication" Usage="Microsoft.Identity.Web.TokenCacheExtensions.AddInMemoryTokenCache (confidentialClientApp, initializeMemoryCache)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Web.TokenCache</AssemblyName>
        <AssemblyVersion>3.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.IConfidentialClientApplication</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="confidentialClientApp" Type="Microsoft.Identity.Client.IConfidentialClientApplication" RefType="this" />
        <Parameter Name="initializeMemoryCache" Type="System.Action&lt;Microsoft.Extensions.DependencyInjection.IServiceCollection&gt;" />
      </Parameters>
      <Docs>
        <param name="confidentialClientApp">Confidential client application.</param>
        <param name="initializeMemoryCache">Action taking a <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
             and by which you initialize your memory cache.</param>
        <summary>
             Add an in-memory well partitioned token cache to MSAL.NET confidential client
             application. Don't use this method in ASP.NET Core: rather use:
             <code>services.AddInMemoryTokenCache()</code> in ConfigureServices.
             </summary>
        <returns>The application for chaining.</returns>
        <remarks>Don't use this method in ASP.NET Core. Just add use the ConfigureServices method
             instead.</remarks>
        <example>
            
             The following code adds an in-memory token cache.
            
             <code>
              app.AddInMemoryTokenCache(services =&gt;
              {
                   services.Configure&lt;MemoryCacheOptions&gt;(options =&gt;
                   {
                       options.SizeLimit = 5000000; // in bytes (5 Mb), for example
                   });
              });
             </code></example>
      </Docs>
    </Member>
  </Members>
</Type>
