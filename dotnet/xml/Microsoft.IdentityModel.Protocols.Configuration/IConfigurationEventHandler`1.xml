<Type Name="IConfigurationEventHandler&lt;T&gt;" FullName="Microsoft.IdentityModel.Protocols.Configuration.IConfigurationEventHandler&lt;T&gt;">
  <TypeSignature Language="C#" Value="public interface IConfigurationEventHandler&lt;T&gt; where T : class" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IConfigurationEventHandler`1&lt;class T&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.IdentityModel.Protocols.Configuration.IConfigurationEventHandler`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IConfigurationEventHandler(Of T)" />
  <TypeSignature Language="F#" Value="type IConfigurationEventHandler&lt;'T (requires 'T : null)&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.IdentityModel.Protocols</AssemblyName>
    <AssemblyVersion>8.13.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">The type of configuration.</typeparam>
    <summary>
            Defines event handlers for configuration retrieval and update operations.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterUpdateAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task AfterUpdateAsync (string metadataAddress, T configuration, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AfterUpdateAsync(string metadataAddress, !T configuration, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Protocols.Configuration.IConfigurationEventHandler`1.AfterUpdateAsync(System.String,`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function AfterUpdateAsync (metadataAddress As String, configuration As T, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member AfterUpdateAsync : string * 'T * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="iConfigurationEventHandler.AfterUpdateAsync (metadataAddress, configuration, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Protocols</AssemblyName>
        <AssemblyVersion>8.13.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadataAddress" Type="System.String" />
        <Parameter Name="configuration" Type="T" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="metadataAddress">The metadata endpoint address.</param>
        <param name="configuration">The retrieved configuration.</param>
        <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
        <summary>
            Called after a configuration has been successfully retrieved in a fire-and-forget manner.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeRetrieveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.IdentityModel.Protocols.Configuration.ConfigurationEventHandlerResult&lt;T&gt;&gt; BeforeRetrieveAsync (string metadataAddress, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.IdentityModel.Protocols.Configuration.ConfigurationEventHandlerResult`1&lt;!T&gt;&gt; BeforeRetrieveAsync(string metadataAddress, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Protocols.Configuration.IConfigurationEventHandler`1.BeforeRetrieveAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeforeRetrieveAsync (metadataAddress As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ConfigurationEventHandlerResult(Of T))" />
      <MemberSignature Language="F#" Value="abstract member BeforeRetrieveAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.IdentityModel.Protocols.Configuration.ConfigurationEventHandlerResult&lt;'T&gt;&gt;" Usage="iConfigurationEventHandler.BeforeRetrieveAsync (metadataAddress, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Protocols</AssemblyName>
        <AssemblyVersion>8.13.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.IdentityModel.Protocols.Configuration.ConfigurationEventHandlerResult&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadataAddress" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="metadataAddress">The metadata endpoint address.</param>
        <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
        <summary>
            Called before retrieving configuration from the metadata endpoint.
            </summary>
        <returns>
            A <see cref="T:Microsoft.IdentityModel.Protocols.Configuration.ConfigurationEventHandlerResult`1" /> if valid and available, or <see cref="F:Microsoft.IdentityModel.Protocols.Configuration.ConfigurationEventHandlerResult`1.NoResult" /> to proceed with normal retrieval.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
