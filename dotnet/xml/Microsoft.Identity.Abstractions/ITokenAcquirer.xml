<Type Name="ITokenAcquirer" FullName="Microsoft.Identity.Abstractions.ITokenAcquirer">
  <TypeSignature Language="C#" Value="public interface ITokenAcquirer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit ITokenAcquirer" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Identity.Abstractions.ITokenAcquirer" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITokenAcquirer" />
  <TypeSignature Language="F#" Value="type ITokenAcquirer = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Identity.Abstractions</AssemblyName>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Interface for the token acquisition service (for instance encapsulating MSAL.NET).
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetTokenForAppAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Identity.Abstractions.AcquireTokenResult&gt; GetTokenForAppAsync (string scope, Microsoft.Identity.Abstractions.AcquireTokenOptions? tokenAcquisitionOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Identity.Abstractions.AcquireTokenResult&gt; GetTokenForAppAsync(string scope, class Microsoft.Identity.Abstractions.AcquireTokenOptions tokenAcquisitionOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Abstractions.ITokenAcquirer.GetTokenForAppAsync(System.String,Microsoft.Identity.Abstractions.AcquireTokenOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenForAppAsync (scope As String, Optional tokenAcquisitionOptions As AcquireTokenOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of AcquireTokenResult)" />
      <MemberSignature Language="F#" Value="abstract member GetTokenForAppAsync : string * Microsoft.Identity.Abstractions.AcquireTokenOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Identity.Abstractions.AcquireTokenResult&gt;" Usage="iTokenAcquirer.GetTokenForAppAsync (scope, tokenAcquisitionOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Identity.Abstractions.AcquireTokenResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="System.String" />
        <Parameter Name="tokenAcquisitionOptions" Type="Microsoft.Identity.Abstractions.AcquireTokenOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope">The scope requested to access a protected API. For this flow (client credentials), the scope
            should be of the form "{ResourceIdUri/.default}" for instance <c>https://management.azure.net/.default</c> or, for Microsoft
            Graph, <c>https://graph.microsoft.com/.default</c> as the requested scopes are defined statically with the application registration
            in the portal, and cannot be overridden in the application, as you can request a token for only one resource at a time (use
            several calls to get tokens for other resources).</param>
        <param name="tokenAcquisitionOptions">Options passed-in to create the token acquisition object which calls into MSAL .NET.</param>
        <param name="cancellationToken">Cancellation token</param>
        <summary>
            Acquires an authentication result from the authority configured in the app, for the confidential client itself (not on behalf of a user)
            using the client credentials flow. See https://aka.ms/msal-net-client-credentials.
            </summary>
        <returns>An authentication result for the app itself, based on its scopes.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenForUserAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Identity.Abstractions.AcquireTokenResult&gt; GetTokenForUserAsync (System.Collections.Generic.IEnumerable&lt;string&gt; scopes, Microsoft.Identity.Abstractions.AcquireTokenOptions? tokenAcquisitionOptions = default, System.Security.Claims.ClaimsPrincipal? user = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Identity.Abstractions.AcquireTokenResult&gt; GetTokenForUserAsync(class System.Collections.Generic.IEnumerable`1&lt;string&gt; scopes, class Microsoft.Identity.Abstractions.AcquireTokenOptions tokenAcquisitionOptions, class System.Security.Claims.ClaimsPrincipal user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Abstractions.ITokenAcquirer.GetTokenForUserAsync(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Abstractions.AcquireTokenOptions,System.Security.Claims.ClaimsPrincipal,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenForUserAsync (scopes As IEnumerable(Of String), Optional tokenAcquisitionOptions As AcquireTokenOptions = Nothing, Optional user As ClaimsPrincipal = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of AcquireTokenResult)" />
      <MemberSignature Language="F#" Value="abstract member GetTokenForUserAsync : seq&lt;string&gt; * Microsoft.Identity.Abstractions.AcquireTokenOptions * System.Security.Claims.ClaimsPrincipal * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Identity.Abstractions.AcquireTokenResult&gt;" Usage="iTokenAcquirer.GetTokenForUserAsync (scopes, tokenAcquisitionOptions, user, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Abstractions</AssemblyName>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Identity.Abstractions.AcquireTokenResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="tokenAcquisitionOptions" Type="Microsoft.Identity.Abstractions.AcquireTokenOptions" />
        <Parameter Name="user" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scopes">Scopes to request for the downstream API to call.</param>
        <param name="tokenAcquisitionOptions">Options passed-in to create the token acquisition object which calls into MSAL .NET.</param>
        <param name="user">Optional claims principal representing the user. If not provided, will use the signed-in
            user (in a web app), or the user for which the token was received (in a web API)
            cases where a given account is a guest in other tenants, and you want to acquire tokens for a specific tenant, like where the user is a guest in.</param>
        <param name="cancellationToken">Cancellation token</param>
        <summary>
            Typically used from an ASP.NET Core web app or web API controller. This method gets an access token
            for a downstream API on behalf of the user account for which the claims are provided in the current user.
            </summary>
        <returns>An <see cref="T:Microsoft.Identity.Abstractions.AcquireTokenResult" /> to call on behalf of the user, the downstream API characterized by its scopes.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
