<Type Name="IByUsernameAndPassword" FullName="Microsoft.Identity.Client.IByUsernameAndPassword">
  <TypeSignature Language="C#" Value="public interface IByUsernameAndPassword" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IByUsernameAndPassword" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Identity.Client.IByUsernameAndPassword" />
  <TypeSignature Language="VB.NET" Value="Public Interface IByUsernameAndPassword" />
  <TypeSignature Language="F#" Value="type IByUsernameAndPassword = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Identity.Client</AssemblyName>
    <AssemblyVersion>4.64.0.0</AssemblyVersion>
    <AssemblyVersion>4.64.1.0</AssemblyVersion>
    <AssemblyVersion>4.65.0.0</AssemblyVersion>
    <AssemblyVersion>4.66.0.0</AssemblyVersion>
    <AssemblyVersion>4.66.1.0</AssemblyVersion>
    <AssemblyVersion>4.66.2.0</AssemblyVersion>
    <AssemblyVersion>4.67.0.0</AssemblyVersion>
    <AssemblyVersion>4.67.1.0</AssemblyVersion>
    <AssemblyVersion>4.67.2.0</AssemblyVersion>
    <AssemblyVersion>4.68.0.0</AssemblyVersion>
    <AssemblyVersion>4.69.1.0</AssemblyVersion>
    <AssemblyVersion>4.70.0.0</AssemblyVersion>
    <AssemblyVersion>4.70.1.0</AssemblyVersion>
    <AssemblyVersion>4.70.2.0</AssemblyVersion>
    <AssemblyVersion>4.71.0.0</AssemblyVersion>
    <AssemblyVersion>4.71.1.0</AssemblyVersion>
    <AssemblyVersion>4.74.0.0</AssemblyVersion>
    <AssemblyVersion>4.74.1.0</AssemblyVersion>
    <AssemblyVersion>4.76.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Provides an explicit interface for using Resource Owner Password Grant on Confidential Client.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AcquireTokenByUsernamePassword">
      <MemberSignature Language="C#" Value="public Microsoft.Identity.Client.AcquireTokenByUsernameAndPasswordConfidentialParameterBuilder AcquireTokenByUsernamePassword (System.Collections.Generic.IEnumerable&lt;string&gt; scopes, string username, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Identity.Client.AcquireTokenByUsernameAndPasswordConfidentialParameterBuilder AcquireTokenByUsernamePassword(class System.Collections.Generic.IEnumerable`1&lt;string&gt; scopes, string username, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.IByUsernameAndPassword.AcquireTokenByUsernamePassword(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcquireTokenByUsernamePassword (scopes As IEnumerable(Of String), username As String, password As String) As AcquireTokenByUsernameAndPasswordConfidentialParameterBuilder" />
      <MemberSignature Language="F#" Value="abstract member AcquireTokenByUsernamePassword : seq&lt;string&gt; * string * string -&gt; Microsoft.Identity.Client.AcquireTokenByUsernameAndPasswordConfidentialParameterBuilder" Usage="iByUsernameAndPassword.AcquireTokenByUsernamePassword (scopes, username, password)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.76.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.AcquireTokenByUsernameAndPasswordConfidentialParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="scopes">Scopes requested to access a protected API.</param>
        <param name="username">Identifier of the user, application requests token on behalf of.
            Generally in UserPrincipalName (UPN) format, e.g. <c>john.doe@contoso.com</c></param>
        <param name="password">User password as a string.</param>
        <summary>
            Acquires a token without user interaction using username and password authentication.
            This method does not look in the token cache, but stores the result in it. Before calling this method, use other methods 
            such as <see cref="M:Microsoft.Identity.Client.IClientApplicationBase.AcquireTokenSilent(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.IAccount)" /> to check the token cache.
            </summary>
        <returns>A builder enabling you to add optional parameters before executing the token request.</returns>
        <remarks>
            Available only for .NET Framework and .NET Core applications. See <see href="https://aka.ms/msal-net-up">our documentation</see> for details.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
