<Type Name="ClientApplicationBase" FullName="Microsoft.Identity.Client.ClientApplicationBase">
  <TypeSignature Language="C#" Value="public abstract class ClientApplicationBase : Microsoft.Identity.Client.ApplicationBase, Microsoft.Identity.Client.IClientApplicationBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ClientApplicationBase extends Microsoft.Identity.Client.ApplicationBase implements class Microsoft.Identity.Client.IApplicationBase, class Microsoft.Identity.Client.IClientApplicationBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Identity.Client.ClientApplicationBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ClientApplicationBase&#xA;Inherits ApplicationBase&#xA;Implements IClientApplicationBase" />
  <TypeSignature Language="F#" Value="type ClientApplicationBase = class&#xA;    inherit ApplicationBase&#xA;    interface IClientApplicationBase&#xA;    interface IApplicationBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Identity.Client</AssemblyName>
    <AssemblyVersion>4.48.1.0</AssemblyVersion>
    <AssemblyVersion>4.49.1.0</AssemblyVersion>
    <AssemblyVersion>4.51.0.0</AssemblyVersion>
    <AssemblyVersion>4.52.0.0</AssemblyVersion>
    <AssemblyVersion>4.53.0.0</AssemblyVersion>
    <AssemblyVersion>4.54.0.0</AssemblyVersion>
    <AssemblyVersion>4.54.1.0</AssemblyVersion>
    <AssemblyVersion>4.55.0.0</AssemblyVersion>
    <AssemblyVersion>4.56.0.0</AssemblyVersion>
    <AssemblyVersion>4.57.0.0</AssemblyVersion>
    <AssemblyVersion>4.58.0.0</AssemblyVersion>
    <AssemblyVersion>4.58.1.0</AssemblyVersion>
    <AssemblyVersion>4.59.0.0</AssemblyVersion>
    <AssemblyVersion>4.60.0.0</AssemblyVersion>
    <AssemblyVersion>4.60.1.0</AssemblyVersion>
    <AssemblyVersion>4.60.2.0</AssemblyVersion>
    <AssemblyVersion>4.60.3.0</AssemblyVersion>
    <AssemblyVersion>4.61.0.0</AssemblyVersion>
    <AssemblyVersion>4.61.1.0</AssemblyVersion>
    <AssemblyVersion>4.61.3.0</AssemblyVersion>
    <AssemblyVersion>4.62.0.0</AssemblyVersion>
    <AssemblyVersion>4.63.0.0</AssemblyVersion>
    <AssemblyVersion>4.64.0.0</AssemblyVersion>
    <AssemblyVersion>4.64.1.0</AssemblyVersion>
    <AssemblyVersion>4.65.0.0</AssemblyVersion>
    <AssemblyVersion>4.66.0.0</AssemblyVersion>
    <AssemblyVersion>4.66.1.0</AssemblyVersion>
    <AssemblyVersion>4.66.2.0</AssemblyVersion>
    <AssemblyVersion>4.67.0.0</AssemblyVersion>
    <AssemblyVersion>4.67.1.0</AssemblyVersion>
    <AssemblyVersion>4.67.2.0</AssemblyVersion>
    <AssemblyVersion>4.68.0.0</AssemblyVersion>
    <AssemblyVersion>4.69.1.0</AssemblyVersion>
    <AssemblyVersion>4.70.0.0</AssemblyVersion>
    <AssemblyVersion>4.70.1.0</AssemblyVersion>
    <AssemblyVersion>4.70.2.0</AssemblyVersion>
    <AssemblyVersion>4.71.0.0</AssemblyVersion>
    <AssemblyVersion>4.71.1.0</AssemblyVersion>
    <AssemblyVersion>4.74.0.0</AssemblyVersion>
    <AssemblyVersion>4.74.1.0</AssemblyVersion>
    <AssemblyVersion>4.76.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Identity.Client.ApplicationBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Identity.Client.IApplicationBase</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Identity.Client.IClientApplicationBase</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Abstract class containing common API methods and properties. Both <see cref="T:Microsoft.Identity.Client.PublicClientApplication" /> and 
            ConfidentialClientApplication
            extend this class. For details see https://aka.ms/msal-net-client-applications
            </summary>
    <remarks>To be added.</remarks>
    <inheritdoc />
  </Docs>
  <Members>
    <Member MemberName="AcquireTokenSilent">
      <MemberSignature Language="C#" Value="public Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder AcquireTokenSilent (System.Collections.Generic.IEnumerable&lt;string&gt; scopes, Microsoft.Identity.Client.IAccount account);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder AcquireTokenSilent(class System.Collections.Generic.IEnumerable`1&lt;string&gt; scopes, class Microsoft.Identity.Client.IAccount account) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ClientApplicationBase.AcquireTokenSilent(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.IAccount)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcquireTokenSilent (scopes As IEnumerable(Of String), account As IAccount) As AcquireTokenSilentParameterBuilder" />
      <MemberSignature Language="F#" Value="abstract member AcquireTokenSilent : seq&lt;string&gt; * Microsoft.Identity.Client.IAccount -&gt; Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder&#xA;override this.AcquireTokenSilent : seq&lt;string&gt; * Microsoft.Identity.Client.IAccount -&gt; Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder" Usage="clientApplicationBase.AcquireTokenSilent (scopes, account)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Identity.Client.IClientApplicationBase.AcquireTokenSilent(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.IAccount)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.76.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="account" Type="Microsoft.Identity.Client.IAccount" />
      </Parameters>
      <Docs>
        <param name="scopes">Scopes requested to access a protected API</param>
        <param name="account">Account for which the token is requested.</param>
        <summary>
             [V3 API] Attempts to acquire an access token for the <paramref name="account" /> from the user token cache.
             See https://aka.ms/msal-net-acquiretokensilent for more details
             </summary>
        <returns>An <see cref="T:Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder" /> used to build the token request, adding optional
             parameters</returns>
        <remarks>
             The access token is considered a match if it contains <b>at least</b> all the requested scopes. This means that an access token with more scopes than
             requested could be returned. If the access token is expired or close to expiration - within a 5 minute window -
             then the cached refresh token (if available) is used to acquire a new access token by making a silent network call.
            
             You can set additional parameters by chaining the builder with:
             <see cref="M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithTenantId(System.String)" /> 
             to request a token for a different authority than the one set at the application construction
             <see cref="M:Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder.WithForceRefresh(System.Boolean)" /> to bypass the user token cache and
             force refreshing the token, as well as
             <see cref="M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithExtraQueryParameters(System.Collections.Generic.Dictionary{System.String,System.String})" /> to
             specify extra query parameters
            
             </remarks>
        <exception cref="T:Microsoft.Identity.Client.MsalUiRequiredException">will be thrown in the case where an interaction is required with the end user of the application,
             for instance, if no refresh token was in the cache, or the user needs to consent, or re-sign-in (for instance if the password expired),
             or the user needs to perform two factor authentication</exception>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="AcquireTokenSilent">
      <MemberSignature Language="C#" Value="public Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder AcquireTokenSilent (System.Collections.Generic.IEnumerable&lt;string&gt; scopes, string loginHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder AcquireTokenSilent(class System.Collections.Generic.IEnumerable`1&lt;string&gt; scopes, string loginHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ClientApplicationBase.AcquireTokenSilent(System.Collections.Generic.IEnumerable{System.String},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcquireTokenSilent (scopes As IEnumerable(Of String), loginHint As String) As AcquireTokenSilentParameterBuilder" />
      <MemberSignature Language="F#" Value="abstract member AcquireTokenSilent : seq&lt;string&gt; * string -&gt; Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder&#xA;override this.AcquireTokenSilent : seq&lt;string&gt; * string -&gt; Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder" Usage="clientApplicationBase.AcquireTokenSilent (scopes, loginHint)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Identity.Client.IClientApplicationBase.AcquireTokenSilent(System.Collections.Generic.IEnumerable{System.String},System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.76.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="loginHint" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="scopes">Scopes requested to access a protected API</param>
        <param name="loginHint">Typically the username, in UPN format, e.g. johnd@contoso.com </param>
        <summary>
             [V3 API] Attempts to acquire an access token for the <see cref="T:Microsoft.Identity.Client.IAccount" />
             having the <see cref="P:Microsoft.Identity.Client.IAccount.Username" /> match the given <paramref name="loginHint" />, from the user token cache.
             See https://aka.ms/msal-net-acquiretokensilent for more details
             </summary>
        <returns>An <see cref="T:Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder" /> used to build the token request, adding optional
             parameters</returns>
        <remarks>
             If multiple <see cref="T:Microsoft.Identity.Client.IAccount" /> match the <paramref name="loginHint" />, or if there are no matches, an exception is thrown.
            
             The access token is considered a match if it contains <b>at least</b> all the requested scopes. This means that an access token with more scopes than
             requested could be returned. If the access token is expired or close to expiration - within a 5 minute window -
             then the cached refresh token (if available) is used to acquire a new access token by making a silent network call.
            
             You can set additional parameters by chaining the builder with:
             <see cref="M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithTenantId(System.String)" /> to request a token for a different authority than the one set at the application construction
             <see cref="M:Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder.WithForceRefresh(System.Boolean)" /> to bypass the user token cache and
             force refreshing the token, as well as
             <see cref="M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithExtraQueryParameters(System.Collections.Generic.Dictionary{System.String,System.String})" /> to
             specify extra query parameters
            
             </remarks>
        <exception cref="T:Microsoft.Identity.Client.MsalUiRequiredException">will be thrown in the case where an interaction is required with the end user of the application,
             for instance, if no refresh token was in the cache, or the user needs to consent, or re-sign-in (for instance if the password expired),
             or the user needs to perform two factor authentication</exception>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="AppConfig">
      <MemberSignature Language="C#" Value="public Microsoft.Identity.Client.IAppConfig AppConfig { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Identity.Client.IAppConfig AppConfig" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Identity.Client.ClientApplicationBase.AppConfig" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AppConfig As IAppConfig" />
      <MemberSignature Language="F#" Value="member this.AppConfig : Microsoft.Identity.Client.IAppConfig" Usage="Microsoft.Identity.Client.ClientApplicationBase.AppConfig" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Identity.Client.IClientApplicationBase.AppConfig</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.76.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.IAppConfig</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Details on the configuration of the ClientApplication for debugging purposes.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Authority">
      <MemberSignature Language="C#" Value="public string Authority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Authority" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Identity.Client.ClientApplicationBase.Authority" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Authority As String" />
      <MemberSignature Language="F#" Value="member this.Authority : string" Usage="Microsoft.Identity.Client.ClientApplicationBase.Authority" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Identity.Client.IClientApplicationBase.Authority</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.76.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the URL of the authority, or security token service (STS) from which MSAL.NET will acquire security tokens
            The return value of this property is either the value provided by the developer in the constructor of the application, or otherwise
            the value of the <see cref="F:Microsoft.Identity.Client.ApplicationBase.DefaultAuthority" /> static member (that is <c>https://login.microsoftonline.com/common/</c>)
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetAccountAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Identity.Client.IAccount&gt; GetAccountAsync (string accountId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Identity.Client.IAccount&gt; GetAccountAsync(string accountId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ClientApplicationBase.GetAccountAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccountAsync (accountId As String) As Task(Of IAccount)" />
      <MemberSignature Language="F#" Value="abstract member GetAccountAsync : string -&gt; System.Threading.Tasks.Task&lt;Microsoft.Identity.Client.IAccount&gt;&#xA;override this.GetAccountAsync : string -&gt; System.Threading.Tasks.Task&lt;Microsoft.Identity.Client.IAccount&gt;" Usage="clientApplicationBase.GetAccountAsync accountId" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Identity.Client.IClientApplicationBase.GetAccountAsync(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.76.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Identity.Client.IAccount&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accountId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="accountId">Account identifier. The identifier is typically the
            value of the <see cref="P:Microsoft.Identity.Client.AccountId.Identifier" /> property of <see cref="T:Microsoft.Identity.Client.AccountId" />.
            You typically get the account ID from an <see cref="T:Microsoft.Identity.Client.IAccount" /> by using the <see cref="P:Microsoft.Identity.Client.IAccount.HomeAccountId" /> property&gt;
            </param>
        <summary>
            Get the <see cref="T:Microsoft.Identity.Client.IAccount" /> by its identifier among the accounts available in the token cache.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetAccountAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Identity.Client.IAccount&gt; GetAccountAsync (string accountId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Identity.Client.IAccount&gt; GetAccountAsync(string accountId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ClientApplicationBase.GetAccountAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccountAsync (accountId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IAccount)" />
      <MemberSignature Language="F#" Value="member this.GetAccountAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Identity.Client.IAccount&gt;" Usage="clientApplicationBase.GetAccountAsync (accountId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.76.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Identity.Client.IAccount&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accountId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="accountId">Account identifier. The identifier is typically the
            value of the <see cref="P:Microsoft.Identity.Client.AccountId.Identifier" /> property of <see cref="T:Microsoft.Identity.Client.AccountId" />.
            You typically get the account ID from an <see cref="T:Microsoft.Identity.Client.IAccount" /> by using the <see cref="P:Microsoft.Identity.Client.IAccount.HomeAccountId" /> property&gt;
            </param>
        <param name="cancellationToken">Cancellation token </param>
        <summary>
            Get the <see cref="T:Microsoft.Identity.Client.IAccount" /> by its identifier among the accounts available in the token cache.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccountsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.Identity.Client.IAccount&gt;&gt; GetAccountsAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Identity.Client.IAccount&gt;&gt; GetAccountsAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ClientApplicationBase.GetAccountsAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccountsAsync () As Task(Of IEnumerable(Of IAccount))" />
      <MemberSignature Language="F#" Value="abstract member GetAccountsAsync : unit -&gt; System.Threading.Tasks.Task&lt;seq&lt;Microsoft.Identity.Client.IAccount&gt;&gt;&#xA;override this.GetAccountsAsync : unit -&gt; System.Threading.Tasks.Task&lt;seq&lt;Microsoft.Identity.Client.IAccount&gt;&gt;" Usage="clientApplicationBase.GetAccountsAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Identity.Client.IClientApplicationBase.GetAccountsAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.76.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.Identity.Client.IAccount&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns all the available <see cref="T:Microsoft.Identity.Client.IAccount">accounts</see> in the user token cache for the application.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetAccountsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.Identity.Client.IAccount&gt;&gt; GetAccountsAsync (string userFlow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Identity.Client.IAccount&gt;&gt; GetAccountsAsync(string userFlow) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ClientApplicationBase.GetAccountsAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccountsAsync (userFlow As String) As Task(Of IEnumerable(Of IAccount))" />
      <MemberSignature Language="F#" Value="abstract member GetAccountsAsync : string -&gt; System.Threading.Tasks.Task&lt;seq&lt;Microsoft.Identity.Client.IAccount&gt;&gt;&#xA;override this.GetAccountsAsync : string -&gt; System.Threading.Tasks.Task&lt;seq&lt;Microsoft.Identity.Client.IAccount&gt;&gt;" Usage="clientApplicationBase.GetAccountsAsync userFlow" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Identity.Client.IClientApplicationBase.GetAccountsAsync(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.76.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.Identity.Client.IAccount&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userFlow" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="userFlow">The identifier is the user flow being targeted by the specific B2C authority/&gt;.
            </param>
        <summary>
            Get the <see cref="T:Microsoft.Identity.Client.IAccount" /> collection by its identifier among the accounts available in the token cache,
            based on the user flow. This is for Azure AD B2C scenarios.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetAccountsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.Identity.Client.IAccount&gt;&gt; GetAccountsAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Identity.Client.IAccount&gt;&gt; GetAccountsAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ClientApplicationBase.GetAccountsAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccountsAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of IEnumerable(Of IAccount))" />
      <MemberSignature Language="F#" Value="member this.GetAccountsAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;seq&lt;Microsoft.Identity.Client.IAccount&gt;&gt;" Usage="clientApplicationBase.GetAccountsAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.76.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.Identity.Client.IAccount&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>
            Returns all the available <see cref="T:Microsoft.Identity.Client.IAccount">accounts</see> in the user token cache for the application.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccountsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.Identity.Client.IAccount&gt;&gt; GetAccountsAsync (string userFlow, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Identity.Client.IAccount&gt;&gt; GetAccountsAsync(string userFlow, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ClientApplicationBase.GetAccountsAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccountsAsync (userFlow As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IEnumerable(Of IAccount))" />
      <MemberSignature Language="F#" Value="member this.GetAccountsAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;seq&lt;Microsoft.Identity.Client.IAccount&gt;&gt;" Usage="clientApplicationBase.GetAccountsAsync (userFlow, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.76.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.Identity.Client.IAccount&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userFlow" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="userFlow">The identifier is the user flow being targeted by the specific B2C authority/&gt;.
            </param>
        <param name="cancellationToken">Cancellation token </param>
        <summary>
            Get the <see cref="T:Microsoft.Identity.Client.IAccount" /> collection by its identifier among the accounts available in the token cache,
            based on the user flow. This is for Azure AD B2C scenarios.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RemoveAsync (Microsoft.Identity.Client.IAccount account);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RemoveAsync(class Microsoft.Identity.Client.IAccount account) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ClientApplicationBase.RemoveAsync(Microsoft.Identity.Client.IAccount)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAsync (account As IAccount) As Task" />
      <MemberSignature Language="F#" Value="abstract member RemoveAsync : Microsoft.Identity.Client.IAccount -&gt; System.Threading.Tasks.Task&#xA;override this.RemoveAsync : Microsoft.Identity.Client.IAccount -&gt; System.Threading.Tasks.Task" Usage="clientApplicationBase.RemoveAsync account" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Identity.Client.IClientApplicationBase.RemoveAsync(Microsoft.Identity.Client.IAccount)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.76.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="account" Type="Microsoft.Identity.Client.IAccount" />
      </Parameters>
      <Docs>
        <param name="account">Instance of the account that needs to be removed</param>
        <summary>
            Removes all tokens in the cache for the specified account.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RemoveAsync (Microsoft.Identity.Client.IAccount account, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task RemoveAsync(class Microsoft.Identity.Client.IAccount account, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ClientApplicationBase.RemoveAsync(Microsoft.Identity.Client.IAccount,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAsync (account As IAccount, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="member this.RemoveAsync : Microsoft.Identity.Client.IAccount * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="clientApplicationBase.RemoveAsync (account, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.76.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="account" Type="Microsoft.Identity.Client.IAccount" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="account">Instance of the account that needs to be removed</param>
        <param name="cancellationToken">Cancellation token</param>
        <summary>
            Removes all tokens in the cache for the specified account.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserTokenCache">
      <MemberSignature Language="C#" Value="public Microsoft.Identity.Client.ITokenCache UserTokenCache { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Identity.Client.ITokenCache UserTokenCache" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Identity.Client.ClientApplicationBase.UserTokenCache" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserTokenCache As ITokenCache" />
      <MemberSignature Language="F#" Value="member this.UserTokenCache : Microsoft.Identity.Client.ITokenCache" Usage="Microsoft.Identity.Client.ClientApplicationBase.UserTokenCache" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Identity.Client.IClientApplicationBase.UserTokenCache</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.76.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.ITokenCache</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            User token cache. It holds access tokens, id tokens and refresh tokens for accounts. It's used
            and updated silently if needed when calling <see cref="M:Microsoft.Identity.Client.ClientApplicationBase.AcquireTokenSilent(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.IAccount)" />
            or one of the overrides of <see cref="M:Microsoft.Identity.Client.ClientApplicationBase.AcquireTokenSilent(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.IAccount)" />.
            It is updated by each AcquireTokenXXX method, with the exception of <c>AcquireTokenForClient</c> which only uses the application
            cache (see <c>IConfidentialClientApplication</c>).
            </summary>
        <value>To be added.</value>
        <remarks>On .NET Framework and .NET Core you can also customize the token cache serialization.
            See https://aka.ms/msal-net-token-cache-serialization. This is taken care of by MSAL.NET on mobile platforms and on UWP.
            It is recommended to use token cache serialization for web site and web api scenarios.
            </remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
