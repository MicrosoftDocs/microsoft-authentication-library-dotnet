<Type Name="IClientApplicationBase" FullName="Microsoft.Identity.Client.IClientApplicationBase">
  <TypeSignature Language="C#" Value="public interface IClientApplicationBase : Microsoft.Identity.Client.IApplicationBase" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IClientApplicationBase implements class Microsoft.Identity.Client.IApplicationBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Identity.Client.IClientApplicationBase" />
  <TypeSignature Language="VB.NET" Value="Public Interface IClientApplicationBase&#xA;Implements IApplicationBase" />
  <TypeSignature Language="F#" Value="type IClientApplicationBase = interface&#xA;    interface IApplicationBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Identity.Client</AssemblyName>
    <AssemblyVersion>4.48.1.0</AssemblyVersion>
    <AssemblyVersion>4.49.1.0</AssemblyVersion>
    <AssemblyVersion>4.51.0.0</AssemblyVersion>
    <AssemblyVersion>4.52.0.0</AssemblyVersion>
    <AssemblyVersion>4.53.0.0</AssemblyVersion>
    <AssemblyVersion>4.54.0.0</AssemblyVersion>
    <AssemblyVersion>4.54.1.0</AssemblyVersion>
    <AssemblyVersion>4.55.0.0</AssemblyVersion>
    <AssemblyVersion>4.56.0.0</AssemblyVersion>
    <AssemblyVersion>4.57.0.0</AssemblyVersion>
    <AssemblyVersion>4.58.0.0</AssemblyVersion>
    <AssemblyVersion>4.58.1.0</AssemblyVersion>
    <AssemblyVersion>4.59.0.0</AssemblyVersion>
    <AssemblyVersion>4.60.0.0</AssemblyVersion>
    <AssemblyVersion>4.60.1.0</AssemblyVersion>
    <AssemblyVersion>4.60.2.0</AssemblyVersion>
    <AssemblyVersion>4.60.3.0</AssemblyVersion>
    <AssemblyVersion>4.61.0.0</AssemblyVersion>
    <AssemblyVersion>4.61.1.0</AssemblyVersion>
    <AssemblyVersion>4.61.3.0</AssemblyVersion>
    <AssemblyVersion>4.62.0.0</AssemblyVersion>
    <AssemblyVersion>4.63.0.0</AssemblyVersion>
    <AssemblyVersion>4.64.0.0</AssemblyVersion>
    <AssemblyVersion>4.64.1.0</AssemblyVersion>
    <AssemblyVersion>4.65.0.0</AssemblyVersion>
    <AssemblyVersion>4.66.0.0</AssemblyVersion>
    <AssemblyVersion>4.66.1.0</AssemblyVersion>
    <AssemblyVersion>4.66.2.0</AssemblyVersion>
    <AssemblyVersion>4.67.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Identity.Client.IApplicationBase</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Interface defining common API methods and properties. Both <see cref="T:PublicClientApplication" /> and <see cref="T:ConfidentialClientApplication" />
            extend this class. For details see https://aka.ms/msal-net-client-applications
            </summary>
    <remarks>To be added.</remarks>
    <inheritdoc />
  </Docs>
  <Members>
    <Member MemberName="AcquireTokenSilent">
      <MemberSignature Language="C#" Value="public Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder AcquireTokenSilent (System.Collections.Generic.IEnumerable&lt;string&gt; scopes, Microsoft.Identity.Client.IAccount account);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder AcquireTokenSilent(class System.Collections.Generic.IEnumerable`1&lt;string&gt; scopes, class Microsoft.Identity.Client.IAccount account) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.IClientApplicationBase.AcquireTokenSilent(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.IAccount)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcquireTokenSilent (scopes As IEnumerable(Of String), account As IAccount) As AcquireTokenSilentParameterBuilder" />
      <MemberSignature Language="F#" Value="abstract member AcquireTokenSilent : seq&lt;string&gt; * Microsoft.Identity.Client.IAccount -&gt; Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder" Usage="iClientApplicationBase.AcquireTokenSilent (scopes, account)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.67.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="account" Type="Microsoft.Identity.Client.IAccount" />
      </Parameters>
      <Docs>
        <param name="scopes">Scopes requested to access a protected API.</param>
        <param name="account">Account for which the token is requested. <see cref="T:Microsoft.Identity.Client.IAccount" /></param>
        <summary>
            Attempts to acquire an access token for the <paramref name="account" /> from the user token cache,
            with advanced parameters controlling the network call. See <see href="https://aka.ms/msal-net-acquiretokensilent">Acquire tokens silently</see>.
            </summary>
        <returns>An <see cref="T:Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder" /> used to build the token request, adding optional
            parameters.</returns>
        <remarks>
            The access token is considered a match if it contains <b>at least</b> all the requested scopes. This means that an access token with more scopes than
            requested could be returned as well. If the access token is expired or close to expiration (within a 5 minute window),
            then the cached refresh token (if available) is used to acquire a new access token by making a silent network call.
            </remarks>
        <exception cref="T:Microsoft.Identity.Client.MsalUiRequiredException">When an interaction is required with the end user of the application,
            for instance, if no refresh token was in the cache; the user needs to consent or to re-sign-in (for instance if the password expired);
            or the user needs to perform two factor authentication.</exception>
      </Docs>
    </Member>
    <Member MemberName="AcquireTokenSilent">
      <MemberSignature Language="C#" Value="public Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder AcquireTokenSilent (System.Collections.Generic.IEnumerable&lt;string&gt; scopes, string loginHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder AcquireTokenSilent(class System.Collections.Generic.IEnumerable`1&lt;string&gt; scopes, string loginHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.IClientApplicationBase.AcquireTokenSilent(System.Collections.Generic.IEnumerable{System.String},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcquireTokenSilent (scopes As IEnumerable(Of String), loginHint As String) As AcquireTokenSilentParameterBuilder" />
      <MemberSignature Language="F#" Value="abstract member AcquireTokenSilent : seq&lt;string&gt; * string -&gt; Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder" Usage="iClientApplicationBase.AcquireTokenSilent (scopes, loginHint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.67.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="loginHint" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="scopes">Scopes requested to access a protected API.</param>
        <param name="loginHint">Typically the username, in UPN format, e.g. <c>johnd@contoso.com</c>.</param>
        <summary>
            Attempts to acquire an access token for the <paramref name="loginHint" /> from the user token cache,
            with advanced parameters controlling the network call. See <see href="https://aka.ms/msal-net-acquiretokensilent">Acquire tokens silently</see>.
            </summary>
        <returns>An <see cref="T:Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder" /> used to build the token request, adding optional
            parameters.</returns>
        <remarks>
            The access token is considered a match if it contains <b>at least</b> all the requested scopes. This means that an access token with more scopes than
            requested could be returned as well. If the access token is expired or close to expiration (within a 5 minute window),
            then the cached refresh token (if available) is used to acquire a new access token by making a silent network call.
            </remarks>
        <exception cref="T:Microsoft.Identity.Client.MsalUiRequiredException">When an interaction is required with the end user of the application,
            for instance, if no refresh token was in the cache; the user needs to consent or to re-sign-in (for instance if the password expired);
            or the user needs to perform two factor authentication.</exception>
      </Docs>
    </Member>
    <Member MemberName="AppConfig">
      <MemberSignature Language="C#" Value="public Microsoft.Identity.Client.IAppConfig AppConfig { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Identity.Client.IAppConfig AppConfig" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Identity.Client.IClientApplicationBase.AppConfig" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AppConfig As IAppConfig" />
      <MemberSignature Language="F#" Value="member this.AppConfig : Microsoft.Identity.Client.IAppConfig" Usage="Microsoft.Identity.Client.IClientApplicationBase.AppConfig" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.67.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.IAppConfig</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Details on the configuration of the ClientApplication for debugging purposes.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Authority">
      <MemberSignature Language="C#" Value="public string Authority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Authority" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Identity.Client.IClientApplicationBase.Authority" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Authority As String" />
      <MemberSignature Language="F#" Value="member this.Authority : string" Usage="Microsoft.Identity.Client.IClientApplicationBase.Authority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.67.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the URL of the authority, or the security token service (STS) from which MSAL.NET will acquire security tokens.
            The return value of this property is either the value provided by the developer in the constructor of the application, or otherwise
            the value of the <see cref="F:Microsoft.Identity.Client.ApplicationBase.DefaultAuthority" /> static member (that is <c>https://login.microsoftonline.com/common/</c>)
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccountAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Identity.Client.IAccount&gt; GetAccountAsync (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Identity.Client.IAccount&gt; GetAccountAsync(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.IClientApplicationBase.GetAccountAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccountAsync (identifier As String) As Task(Of IAccount)" />
      <MemberSignature Language="F#" Value="abstract member GetAccountAsync : string -&gt; System.Threading.Tasks.Task&lt;Microsoft.Identity.Client.IAccount&gt;" Usage="iClientApplicationBase.GetAccountAsync identifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.67.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Identity.Client.IAccount&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">Account identifier. The value of the identifier will probably have been stored value from the
            value of the <see cref="P:Microsoft.Identity.Client.AccountId.Identifier" /> property of <see cref="T:Microsoft.Identity.Client.AccountId" />.
            You typically get the account ID from an <see cref="T:Microsoft.Identity.Client.IAccount" /> by using the <see cref="P:Microsoft.Identity.Client.IAccount.HomeAccountId" /> property.</param>
        <summary>
            Get the <see cref="T:Microsoft.Identity.Client.IAccount" /> by its identifier among the accounts available in the token cache and of the same
            environment (authority host) as <see cref="P:Microsoft.Identity.Client.IClientApplicationBase.Authority" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccountsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.Identity.Client.IAccount&gt;&gt; GetAccountsAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Identity.Client.IAccount&gt;&gt; GetAccountsAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.IClientApplicationBase.GetAccountsAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccountsAsync () As Task(Of IEnumerable(Of IAccount))" />
      <MemberSignature Language="F#" Value="abstract member GetAccountsAsync : unit -&gt; System.Threading.Tasks.Task&lt;seq&lt;Microsoft.Identity.Client.IAccount&gt;&gt;" Usage="iClientApplicationBase.GetAccountsAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.67.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.Identity.Client.IAccount&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns all the available <see cref="T:Microsoft.Identity.Client.IAccount">accounts</see> in the user token cache for the application.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccountsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.Identity.Client.IAccount&gt;&gt; GetAccountsAsync (string userFlow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Identity.Client.IAccount&gt;&gt; GetAccountsAsync(string userFlow) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.IClientApplicationBase.GetAccountsAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccountsAsync (userFlow As String) As Task(Of IEnumerable(Of IAccount))" />
      <MemberSignature Language="F#" Value="abstract member GetAccountsAsync : string -&gt; System.Threading.Tasks.Task&lt;seq&lt;Microsoft.Identity.Client.IAccount&gt;&gt;" Usage="iClientApplicationBase.GetAccountsAsync userFlow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.67.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.Identity.Client.IAccount&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userFlow" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="userFlow">The identifier is the user flow being targeted by the specific B2C authority.</param>
        <summary>
            Only for Azure AD B2C scenarios, get the <see cref="T:Microsoft.Identity.Client.IAccount" /> collection by its identifier
            among the accounts available in the token cache based on the user flow.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RemoveAsync (Microsoft.Identity.Client.IAccount account);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RemoveAsync(class Microsoft.Identity.Client.IAccount account) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.IClientApplicationBase.RemoveAsync(Microsoft.Identity.Client.IAccount)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAsync (account As IAccount) As Task" />
      <MemberSignature Language="F#" Value="abstract member RemoveAsync : Microsoft.Identity.Client.IAccount -&gt; System.Threading.Tasks.Task" Usage="iClientApplicationBase.RemoveAsync account" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.67.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="account" Type="Microsoft.Identity.Client.IAccount" />
      </Parameters>
      <Docs>
        <param name="account">Instance of the account that needs to be removed.</param>
        <summary>
            Removes all tokens in the cache for the specified account.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserTokenCache">
      <MemberSignature Language="C#" Value="public Microsoft.Identity.Client.ITokenCache UserTokenCache { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Identity.Client.ITokenCache UserTokenCache" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Identity.Client.IClientApplicationBase.UserTokenCache" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserTokenCache As ITokenCache" />
      <MemberSignature Language="F#" Value="member this.UserTokenCache : Microsoft.Identity.Client.ITokenCache" Usage="Microsoft.Identity.Client.IClientApplicationBase.UserTokenCache" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.67.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.ITokenCache</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            User token cache which holds ID tokens, access tokens, and refresh tokens for accounts. It's used
            and updated silently if needed when calling <see cref="M:Microsoft.Identity.Client.ClientApplicationBase.AcquireTokenSilent(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.IAccount)" />
            It is updated by each acquire token method, with the exception of <see cref="M:Microsoft.Identity.Client.IConfidentialClientApplication.AcquireTokenForClient(System.Collections.Generic.IEnumerable{System.String})" /> which only uses the application
            cache (see <see cref="P:Microsoft.Identity.Client.IConfidentialClientApplication.AppTokenCache" />).
            </summary>
        <value>To be added.</value>
        <remarks>On .NET Framework and .NET Core you can also customize the token cache serialization.
            See https://aka.ms/msal-net-token-cache-serialization. This is taken care of by MSAL.NET on mobile platforms.
            It is recommended to use token cache serialization for web site and web api scenarios.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
