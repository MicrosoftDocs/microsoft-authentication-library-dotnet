<Type Name="AbstractAcquireTokenParameterBuilder&lt;T&gt;" FullName="Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder&lt;T&gt;">
  <TypeSignature Language="C#" Value="public abstract class AbstractAcquireTokenParameterBuilder&lt;T&gt; : Microsoft.Identity.Client.BaseAbstractAcquireTokenParameterBuilder&lt;T&gt; where T : BaseAbstractAcquireTokenParameterBuilder&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit AbstractAcquireTokenParameterBuilder`1&lt;(class Microsoft.Identity.Client.BaseAbstractAcquireTokenParameterBuilder`1&lt;!T&gt;) T&gt; extends Microsoft.Identity.Client.BaseAbstractAcquireTokenParameterBuilder`1&lt;!T&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class AbstractAcquireTokenParameterBuilder(Of T)&#xA;Inherits BaseAbstractAcquireTokenParameterBuilder(Of T)" />
  <TypeSignature Language="F#" Value="type AbstractAcquireTokenParameterBuilder&lt;'T (requires 'T :&gt; BaseAbstractAcquireTokenParameterBuilder&lt;'T&gt;)&gt; = class&#xA;    inherit BaseAbstractAcquireTokenParameterBuilder&lt;'T (requires 'T :&gt; BaseAbstractAcquireTokenParameterBuilder&lt;'T&gt;)&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Identity.Client</AssemblyName>
    <AssemblyVersion>4.48.1.0</AssemblyVersion>
    <AssemblyVersion>4.49.1.0</AssemblyVersion>
    <AssemblyVersion>4.51.0.0</AssemblyVersion>
    <AssemblyVersion>4.52.0.0</AssemblyVersion>
    <AssemblyVersion>4.53.0.0</AssemblyVersion>
    <AssemblyVersion>4.54.0.0</AssemblyVersion>
    <AssemblyVersion>4.54.1.0</AssemblyVersion>
    <AssemblyVersion>4.55.0.0</AssemblyVersion>
    <AssemblyVersion>4.56.0.0</AssemblyVersion>
    <AssemblyVersion>4.57.0.0</AssemblyVersion>
    <AssemblyVersion>4.58.0.0</AssemblyVersion>
    <AssemblyVersion>4.58.1.0</AssemblyVersion>
    <AssemblyVersion>4.59.0.0</AssemblyVersion>
    <AssemblyVersion>4.60.0.0</AssemblyVersion>
    <AssemblyVersion>4.60.1.0</AssemblyVersion>
    <AssemblyVersion>4.60.2.0</AssemblyVersion>
    <AssemblyVersion>4.60.3.0</AssemblyVersion>
    <AssemblyVersion>4.61.0.0</AssemblyVersion>
    <AssemblyVersion>4.61.1.0</AssemblyVersion>
    <AssemblyVersion>4.61.3.0</AssemblyVersion>
    <AssemblyVersion>4.62.0.0</AssemblyVersion>
    <AssemblyVersion>4.63.0.0</AssemblyVersion>
    <AssemblyVersion>4.64.0.0</AssemblyVersion>
    <AssemblyVersion>4.64.1.0</AssemblyVersion>
    <AssemblyVersion>4.65.0.0</AssemblyVersion>
    <AssemblyVersion>4.66.0.0</AssemblyVersion>
    <AssemblyVersion>4.66.1.0</AssemblyVersion>
    <AssemblyVersion>4.66.2.0</AssemblyVersion>
    <AssemblyVersion>4.67.0.0</AssemblyVersion>
    <AssemblyVersion>4.67.1.0</AssemblyVersion>
    <AssemblyVersion>4.67.2.0</AssemblyVersion>
    <AssemblyVersion>4.68.0.0</AssemblyVersion>
    <AssemblyVersion>4.69.1.0</AssemblyVersion>
    <AssemblyVersion>4.70.0.0</AssemblyVersion>
    <AssemblyVersion>4.70.1.0</AssemblyVersion>
    <AssemblyVersion>4.70.2.0</AssemblyVersion>
    <AssemblyVersion>4.71.0.0</AssemblyVersion>
    <AssemblyVersion>4.71.1.0</AssemblyVersion>
    <AssemblyVersion>4.72.0.0</AssemblyVersion>
    <AssemblyVersion>4.72.1.0</AssemblyVersion>
    <AssemblyVersion>4.73.0.0</AssemblyVersion>
    <AssemblyVersion>4.73.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <BaseTypeName>Microsoft.Identity.Client.BaseAbstractAcquireTokenParameterBuilder&lt;T&gt;</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>Microsoft.Identity.Client.BaseAbstractAcquireTokenParameterBuilder&lt;T&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="T">T</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="T" />
    <summary>
            Base class for builders of token requests, which attempt to acquire a token
            based on the provided parameters.
            </summary>
    <remarks>To be added.</remarks>
    <inheritdoc />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AbstractAcquireTokenParameterBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.73.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Default constructor for AbstractAcquireTokenParameterBuilder.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithAdfsAuthority">
      <MemberSignature Language="C#" Value="public T WithAdfsAuthority (string authorityUri, bool validateAuthority = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T WithAdfsAuthority(string authorityUri, bool validateAuthority) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAdfsAuthority(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithAdfsAuthority (authorityUri As String, Optional validateAuthority As Boolean = true) As T" />
      <MemberSignature Language="F#" Value="member this.WithAdfsAuthority : string * bool -&gt; 'T" Usage="abstractAcquireTokenParameterBuilder.WithAdfsAuthority (authorityUri, validateAuthority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.73.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authorityUri" Type="System.String" />
        <Parameter Name="validateAuthority" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="authorityUri">Authority URL for an ADFS server.</param>
        <param name="validateAuthority">Whether the authority should be validated against the server metadata.</param>
        <summary>
            Adds a known Authority corresponding to an ADFS server. See https://aka.ms/msal-net-adfs.
            </summary>
        <returns>The builder to chain the .With methods.</returns>
        <remarks>MSAL.NET supports ADFS 2019 or later.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithAuthority">
      <MemberSignature Language="C#" Value="public T WithAuthority (Microsoft.Identity.Client.AadAuthorityAudience authorityAudience, bool validateAuthority = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T WithAuthority(valuetype Microsoft.Identity.Client.AadAuthorityAudience authorityAudience, bool validateAuthority) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority(Microsoft.Identity.Client.AadAuthorityAudience,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithAuthority (authorityAudience As AadAuthorityAudience, Optional validateAuthority As Boolean = true) As T" />
      <MemberSignature Language="F#" Value="member this.WithAuthority : Microsoft.Identity.Client.AadAuthorityAudience * bool -&gt; 'T" Usage="abstractAcquireTokenParameterBuilder.WithAuthority (authorityAudience, validateAuthority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.73.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This API has been deprecated. You can override the tenant ID in the request using WithTenantId. See https://aka.ms/msal-net-authority-override ")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This API has been deprecated. You can override the tenant ID in the request using WithTenantId. See https://aka.ms/msal-net-authority-override ")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authorityAudience" Type="Microsoft.Identity.Client.AadAuthorityAudience" />
        <Parameter Name="validateAuthority" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="authorityAudience">Sign-in audience (one AAD organization,
            any work and school accounts, or any work and school accounts and Microsoft personal
            accounts.</param>
        <param name="validateAuthority">Whether the authority should be validated against the server metadata.</param>
        <summary>
            Important: Use WithTenantId or WithTenantIdFromAuthority instead, or WithB2CAuthority for B2C authorities.
            
            Adds a known Azure AD authority to the application to sign-in users specifying
            the sign-in audience (the cloud being the Azure public cloud). See https://aka.ms/msal-net-application-configuration.
            </summary>
        <returns>The builder to chain the .With methods.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithAuthority">
      <MemberSignature Language="C#" Value="public T WithAuthority (string authorityUri, bool validateAuthority = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T WithAuthority(string authorityUri, bool validateAuthority) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithAuthority (authorityUri As String, Optional validateAuthority As Boolean = true) As T" />
      <MemberSignature Language="F#" Value="member this.WithAuthority : string * bool -&gt; 'T" Usage="abstractAcquireTokenParameterBuilder.WithAuthority (authorityUri, validateAuthority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.73.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This API has been deprecated. You can override the tenant ID in the request using WithTenantId. See https://aka.ms/msal-net-authority-override ")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This API has been deprecated. You can override the tenant ID in the request using WithTenantId. See https://aka.ms/msal-net-authority-override ")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authorityUri" Type="System.String" />
        <Parameter Name="validateAuthority" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="authorityUri">Uri for the authority. In the case when the authority URI is 
            a known Azure AD URI, this setting needs to be consistent with what is declared in 
            the application registration portal.</param>
        <param name="validateAuthority">Whether the authority should be validated against the server metadata.</param>
        <summary>
            Important: Use WithTenantId or WithTenantIdFromAuthority instead, or WithB2CAuthority for B2C authorities.
            
            Specific authority for which the token is requested. Passing a different value than configured
            at the application constructor narrows down the selection to a specific tenant.
            This does not change the configured value in the application. This is specific
            to applications managing several accounts (like a mail client with several mailboxes).
            See https://aka.ms/msal-net-application-configuration.
            </summary>
        <returns>The builder to chain the .With methods.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithAuthority">
      <MemberSignature Language="C#" Value="public T WithAuthority (Microsoft.Identity.Client.AzureCloudInstance azureCloudInstance, Microsoft.Identity.Client.AadAuthorityAudience authorityAudience, bool validateAuthority = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T WithAuthority(valuetype Microsoft.Identity.Client.AzureCloudInstance azureCloudInstance, valuetype Microsoft.Identity.Client.AadAuthorityAudience authorityAudience, bool validateAuthority) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority(Microsoft.Identity.Client.AzureCloudInstance,Microsoft.Identity.Client.AadAuthorityAudience,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithAuthority (azureCloudInstance As AzureCloudInstance, authorityAudience As AadAuthorityAudience, Optional validateAuthority As Boolean = true) As T" />
      <MemberSignature Language="F#" Value="member this.WithAuthority : Microsoft.Identity.Client.AzureCloudInstance * Microsoft.Identity.Client.AadAuthorityAudience * bool -&gt; 'T" Usage="abstractAcquireTokenParameterBuilder.WithAuthority (azureCloudInstance, authorityAudience, validateAuthority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.73.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This API has been deprecated. You can override the tenant ID in the request using WithTenantId. See https://aka.ms/msal-net-authority-override ")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This API has been deprecated. You can override the tenant ID in the request using WithTenantId. See https://aka.ms/msal-net-authority-override ")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="azureCloudInstance" Type="Microsoft.Identity.Client.AzureCloudInstance" />
        <Parameter Name="authorityAudience" Type="Microsoft.Identity.Client.AadAuthorityAudience" />
        <Parameter Name="validateAuthority" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="azureCloudInstance">Instance of Azure Cloud (for instance Azure
            worldwide cloud, Azure German Cloud, US government ...).</param>
        <param name="authorityAudience">Sign-in audience (one AAD organization,
            any work and school accounts, or any work and school accounts and Microsoft personal
            accounts.</param>
        <param name="validateAuthority">Whether the authority should be validated against the server metadata.</param>
        <summary>
            Adds a known Azure AD authority to the application to sign-in users specifying
            the cloud instance and the sign-in audience. See https://aka.ms/msal-net-application-configuration.
            </summary>
        <returns>The builder to chain the .With methods.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithAuthority">
      <MemberSignature Language="C#" Value="public T WithAuthority (Microsoft.Identity.Client.AzureCloudInstance azureCloudInstance, Guid tenantId, bool validateAuthority = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T WithAuthority(valuetype Microsoft.Identity.Client.AzureCloudInstance azureCloudInstance, valuetype System.Guid tenantId, bool validateAuthority) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority(Microsoft.Identity.Client.AzureCloudInstance,System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithAuthority (azureCloudInstance As AzureCloudInstance, tenantId As Guid, Optional validateAuthority As Boolean = true) As T" />
      <MemberSignature Language="F#" Value="member this.WithAuthority : Microsoft.Identity.Client.AzureCloudInstance * Guid * bool -&gt; 'T" Usage="abstractAcquireTokenParameterBuilder.WithAuthority (azureCloudInstance, tenantId, validateAuthority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.73.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This API has been deprecated. You can override the tenant ID in the request using WithTenantId. See https://aka.ms/msal-net-authority-override ")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This API has been deprecated. You can override the tenant ID in the request using WithTenantId. See https://aka.ms/msal-net-authority-override ")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="azureCloudInstance" Type="Microsoft.Identity.Client.AzureCloudInstance" />
        <Parameter Name="tenantId" Type="System.Guid" />
        <Parameter Name="validateAuthority" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="azureCloudInstance">Instance of Azure Cloud (for instance Azure
            worldwide cloud, Azure German Cloud, US government ...).</param>
        <param name="tenantId">Tenant Id of the tenant from which to sign-in users.</param>
        <param name="validateAuthority">Whether the authority should be validated against the server metadata.</param>
        <summary>
            Important: Use WithTenantId or WithTenantIdFromAuthority instead, or WithB2CAuthority for B2C authorities.
            
            Adds a known Azure AD authority to the application to sign-in users from a single
            organization (single tenant application) described by its cloud instance and its tenant ID.
            See https://aka.ms/msal-net-application-configuration.
            </summary>
        <returns>The builder to chain the .With methods.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithAuthority">
      <MemberSignature Language="C#" Value="public T WithAuthority (Microsoft.Identity.Client.AzureCloudInstance azureCloudInstance, string tenant, bool validateAuthority = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T WithAuthority(valuetype Microsoft.Identity.Client.AzureCloudInstance azureCloudInstance, string tenant, bool validateAuthority) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority(Microsoft.Identity.Client.AzureCloudInstance,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithAuthority (azureCloudInstance As AzureCloudInstance, tenant As String, Optional validateAuthority As Boolean = true) As T" />
      <MemberSignature Language="F#" Value="member this.WithAuthority : Microsoft.Identity.Client.AzureCloudInstance * string * bool -&gt; 'T" Usage="abstractAcquireTokenParameterBuilder.WithAuthority (azureCloudInstance, tenant, validateAuthority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.73.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This API has been deprecated. You can override the tenant ID in the request using WithTenantId. See https://aka.ms/msal-net-authority-override ")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This API has been deprecated. You can override the tenant ID in the request using WithTenantId. See https://aka.ms/msal-net-authority-override ")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="azureCloudInstance" Type="Microsoft.Identity.Client.AzureCloudInstance" />
        <Parameter Name="tenant" Type="System.String" />
        <Parameter Name="validateAuthority" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="azureCloudInstance">Instance of Azure Cloud (for instance Azure
            worldwide cloud, Azure German Cloud, US government ...).</param>
        <param name="tenant">Tenant Id of the tenant from which to sign-in users. This can also be a GUID.</param>
        <param name="validateAuthority">Whether the authority should be validated against the server metadata.</param>
        <summary>
            Important: Use WithTenantId or WithTenantIdFromAuthority instead, or WithB2CAuthority for B2C authorities.
            
            Adds a known Azure AD authority to the application to sign-in users from a single
            organization (single tenant application) described by its cloud instance and its domain
            name or tenant ID. See https://aka.ms/msal-net-application-configuration.
            </summary>
        <returns>The builder to chain the .With methods.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithAuthority">
      <MemberSignature Language="C#" Value="public T WithAuthority (string cloudInstanceUri, Guid tenantId, bool validateAuthority = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T WithAuthority(string cloudInstanceUri, valuetype System.Guid tenantId, bool validateAuthority) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority(System.String,System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithAuthority (cloudInstanceUri As String, tenantId As Guid, Optional validateAuthority As Boolean = true) As T" />
      <MemberSignature Language="F#" Value="member this.WithAuthority : string * Guid * bool -&gt; 'T" Usage="abstractAcquireTokenParameterBuilder.WithAuthority (cloudInstanceUri, tenantId, validateAuthority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.73.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This API has been deprecated. You can override the tenant ID in the request using WithTenantId. See https://aka.ms/msal-net-authority-override ")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This API has been deprecated. You can override the tenant ID in the request using WithTenantId. See https://aka.ms/msal-net-authority-override ")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cloudInstanceUri" Type="System.String" />
        <Parameter Name="tenantId" Type="System.Guid" />
        <Parameter Name="validateAuthority" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="cloudInstanceUri">Azure Cloud instance.</param>
        <param name="tenantId">GUID of the tenant from which to sign-in users.</param>
        <param name="validateAuthority">Whether the authority should be validated against the server metadata.</param>
        <summary>
            Important: Use WithTenantId or WithTenantIdFromAuthority instead, or WithB2CAuthority for B2C authorities.
            
            Adds a known Azure AD authority to the application to sign-in users from a single
            organization (single tenant application) specified by its tenant ID. See https://aka.ms/msal-net-application-configuration.
            </summary>
        <returns>The builder to chain the .With methods.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithAuthority">
      <MemberSignature Language="C#" Value="public T WithAuthority (string cloudInstanceUri, string tenant, bool validateAuthority = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T WithAuthority(string cloudInstanceUri, string tenant, bool validateAuthority) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithAuthority (cloudInstanceUri As String, tenant As String, Optional validateAuthority As Boolean = true) As T" />
      <MemberSignature Language="F#" Value="member this.WithAuthority : string * string * bool -&gt; 'T" Usage="abstractAcquireTokenParameterBuilder.WithAuthority (cloudInstanceUri, tenant, validateAuthority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.73.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This API has been deprecated. You can override the tenant ID in the request using WithTenantId. See https://aka.ms/msal-net-authority-override ")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This API has been deprecated. You can override the tenant ID in the request using WithTenantId. See https://aka.ms/msal-net-authority-override ")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cloudInstanceUri" Type="System.String" />
        <Parameter Name="tenant" Type="System.String" />
        <Parameter Name="validateAuthority" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="cloudInstanceUri">Uri to the Azure Cloud instance (for instance
            <c>https://login.microsoftonline.com)</c>.</param>
        <param name="tenant">Tenant Id associated with the tenant from which to sign-in users.</param>
        <param name="validateAuthority">Whether the authority should be validated against the server metadata.</param>
        <summary>
            Important: Use WithTenantId or WithTenantIdFromAuthority instead, or WithB2CAuthority for B2C authorities.
            
            Adds a known Azure AD authority to the application to sign-in users from a single
            organization (single tenant application) described by its domain name. See https://aka.ms/msal-net-application-configuration.
            </summary>
        <returns>The builder to chain the .With methods.</returns>
        <remarks>
          <paramref name="tenant" /> can also contain the string representation of a GUID (tenantId),
            or even <c>common</c>, <c>organizations</c> or <c>consumers</c> but in this case
            it's recommended to use another override (<see cref="M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority(Microsoft.Identity.Client.AzureCloudInstance,System.Guid,System.Boolean)" />
            and <see cref="M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority(Microsoft.Identity.Client.AzureCloudInstance,Microsoft.Identity.Client.AadAuthorityAudience,System.Boolean)" /></remarks>
      </Docs>
    </Member>
    <Member MemberName="WithB2CAuthority">
      <MemberSignature Language="C#" Value="public T WithB2CAuthority (string authorityUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T WithB2CAuthority(string authorityUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithB2CAuthority(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithB2CAuthority (authorityUri As String) As T" />
      <MemberSignature Language="F#" Value="member this.WithB2CAuthority : string -&gt; 'T" Usage="abstractAcquireTokenParameterBuilder.WithB2CAuthority authorityUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.73.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authorityUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="authorityUri">Azure AD B2C authority, including the B2C policy (for instance
            <c>"https://fabrikamb2c.b2clogin.com/tfp/{Tenant}/{policy}</c></param>
        <summary>
            Adds a known authority corresponding to an Azure AD B2C policy.
            See https://aka.ms/msal-net-b2c-specificities
            </summary>
        <returns>The builder to chain the .With methods.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithClaims">
      <MemberSignature Language="C#" Value="public T WithClaims (string claims);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T WithClaims(string claims) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithClaims(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithClaims (claims As String) As T" />
      <MemberSignature Language="F#" Value="member this.WithClaims : string -&gt; 'T" Usage="abstractAcquireTokenParameterBuilder.WithClaims claims" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.73.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="claims" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="claims">A string with one or multiple claims.</param>
        <summary>
            Sets claims in the query. Use when the AAD admin has enabled conditional access. Acquiring the token normally will result in a
            <see cref="T:Microsoft.Identity.Client.MsalUiRequiredException" /> with the <see cref="P:Microsoft.Identity.Client.MsalServiceException.Claims" /> property set. Retry the 
            token acquisition, and use this value in the <see cref="M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithClaims(System.String)" /> method. See https://aka.ms/msal-exceptions for details
            as well as https://aka.ms/msal-net-claim-challenge.
            </summary>
        <returns>The builder to chain .With methods.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithExtraQueryParameters">
      <MemberSignature Language="C#" Value="public T WithExtraQueryParameters (string extraQueryParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T WithExtraQueryParameters(string extraQueryParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithExtraQueryParameters(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithExtraQueryParameters (extraQueryParameters As String) As T" />
      <MemberSignature Language="F#" Value="override this.WithExtraQueryParameters : string -&gt; 'T" Usage="abstractAcquireTokenParameterBuilder.WithExtraQueryParameters extraQueryParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.73.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extraQueryParameters" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="extraQueryParameters">This parameter will be appended as is to the query string in the HTTP authentication request to the authority.
            The string needs to be properly URL-encoded and ready to send as a string of segments of the form <c>key=value</c> separated by an ampersand character.
            </param>
        <summary>
            Sets Extra Query Parameters for the query string in the HTTP authentication request.
            </summary>
        <returns>The builder to chain .With methods.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithScopes">
      <MemberSignature Language="C#" Value="protected T WithScopes (System.Collections.Generic.IEnumerable&lt;string&gt; scopes);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance !T WithScopes(class System.Collections.Generic.IEnumerable`1&lt;string&gt; scopes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithScopes(System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Protected Function WithScopes (scopes As IEnumerable(Of String)) As T" />
      <MemberSignature Language="F#" Value="member this.WithScopes : seq&lt;string&gt; -&gt; 'T" Usage="abstractAcquireTokenParameterBuilder.WithScopes scopes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.73.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="scopes">Scopes requested to access a protected API</param>
        <summary>
            Specifies which scopes to request. This method is used when your application needs
            to specify the scopes needed to call a protected API. See
            <see>https://docs.microsoft.com/azure/active-directory/develop/v2-permissions-and-consent</see> to learn
            more about scopes, permissions and consent, and
            <see>https://docs.microsoft.com/azure/active-directory/develop/msal-v1-app-scopes</see> to learn how
            to create scopes for legacy applications which used to expose OAuth2 permissions.
            </summary>
        <returns>The builder to chain the .With methods.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithTenantId">
      <MemberSignature Language="C#" Value="public T WithTenantId (string tenantId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T WithTenantId(string tenantId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithTenantId(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithTenantId (tenantId As String) As T" />
      <MemberSignature Language="F#" Value="member this.WithTenantId : string -&gt; 'T" Usage="abstractAcquireTokenParameterBuilder.WithTenantId tenantId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.73.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tenantId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tenantId">Tenant ID of the Microsoft Entra ID tenant
            or a domain associated with this Microsoft Entra ID tenant, in order to sign-in a user of a specific organization only.</param>
        <summary>
            Overrides the tenant ID specified in the authority at the application level. This operation preserves the authority host (environment).
            
            If an authority was not specified at the application level, the default used is `https://login.microsoftonline.com/common`.
            </summary>
        <returns>The builder to chain the .With methods.</returns>
        <remarks>
            The tenant should be more restrictive than the one configured at the application level, e.g. don't use "common".
            Does not affect authority validation, which is specified at the application level.
            </remarks>
        <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="tenantId" /> is null or an empty string.</exception>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="tenantId" /> is not well-formatted (for example, has spaces).</exception>
        <exception cref="T:Microsoft.Identity.Client.MsalClientException">Thrown in more general exception scenarios (for ex. if the application was configured with an authority that does not allow tenants).</exception>
      </Docs>
    </Member>
    <Member MemberName="WithTenantIdFromAuthority">
      <MemberSignature Language="C#" Value="public T WithTenantIdFromAuthority (Uri authorityUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T WithTenantIdFromAuthority(class System.Uri authorityUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithTenantIdFromAuthority(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithTenantIdFromAuthority (authorityUri As Uri) As T" />
      <MemberSignature Language="F#" Value="member this.WithTenantIdFromAuthority : Uri -&gt; 'T" Usage="abstractAcquireTokenParameterBuilder.WithTenantIdFromAuthority authorityUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.73.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authorityUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="authorityUri">URI from which to extract the tenant ID</param>
        <summary>
            Extracts the tenant ID from the provided authority URI and overrides the tenant ID specified in the authority at the application level. This operation preserves the authority host (environment) provided to the application builder.
            If an authority was not provided to the application builder, this method will replace the tenant ID in the default authority - `https://login.microsoftonline.com/common`.
            </summary>
        <returns>The builder to chain the .With methods.</returns>
        <remarks>
            The tenant should be more restrictive than the one configured at the application level, e.g. don't use "common".
            Does not affect authority validation, which is specified at the application level.
            </remarks>
        <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="authorityUri" /> is null or an empty string.</exception>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="authorityUri" /> is not well-formatted (for example, has spaces).</exception>
        <exception cref="T:Microsoft.Identity.Client.MsalClientException">Thrown in general exception scenarios (for example if the application was configured with an authority that does not allow tenants).</exception>
      </Docs>
    </Member>
  </Members>
</Type>
