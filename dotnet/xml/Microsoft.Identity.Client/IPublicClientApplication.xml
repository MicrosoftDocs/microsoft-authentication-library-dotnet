<Type Name="IPublicClientApplication" FullName="Microsoft.Identity.Client.IPublicClientApplication">
  <TypeSignature Language="C#" Value="public interface IPublicClientApplication : Microsoft.Identity.Client.IClientApplicationBase" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IPublicClientApplication implements class Microsoft.Identity.Client.IApplicationBase, class Microsoft.Identity.Client.IClientApplicationBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Identity.Client.IPublicClientApplication" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPublicClientApplication&#xA;Implements IClientApplicationBase" />
  <TypeSignature Language="F#" Value="type IPublicClientApplication = interface&#xA;    interface IClientApplicationBase&#xA;    interface IApplicationBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Identity.Client</AssemblyName>
    <AssemblyVersion>4.48.1.0</AssemblyVersion>
    <AssemblyVersion>4.49.1.0</AssemblyVersion>
    <AssemblyVersion>4.51.0.0</AssemblyVersion>
    <AssemblyVersion>4.52.0.0</AssemblyVersion>
    <AssemblyVersion>4.53.0.0</AssemblyVersion>
    <AssemblyVersion>4.54.0.0</AssemblyVersion>
    <AssemblyVersion>4.54.1.0</AssemblyVersion>
    <AssemblyVersion>4.55.0.0</AssemblyVersion>
    <AssemblyVersion>4.56.0.0</AssemblyVersion>
    <AssemblyVersion>4.57.0.0</AssemblyVersion>
    <AssemblyVersion>4.58.0.0</AssemblyVersion>
    <AssemblyVersion>4.58.1.0</AssemblyVersion>
    <AssemblyVersion>4.59.0.0</AssemblyVersion>
    <AssemblyVersion>4.60.0.0</AssemblyVersion>
    <AssemblyVersion>4.60.1.0</AssemblyVersion>
    <AssemblyVersion>4.60.2.0</AssemblyVersion>
    <AssemblyVersion>4.60.3.0</AssemblyVersion>
    <AssemblyVersion>4.61.0.0</AssemblyVersion>
    <AssemblyVersion>4.61.1.0</AssemblyVersion>
    <AssemblyVersion>4.61.3.0</AssemblyVersion>
    <AssemblyVersion>4.62.0.0</AssemblyVersion>
    <AssemblyVersion>4.63.0.0</AssemblyVersion>
    <AssemblyVersion>4.64.0.0</AssemblyVersion>
    <AssemblyVersion>4.64.1.0</AssemblyVersion>
    <AssemblyVersion>4.65.0.0</AssemblyVersion>
    <AssemblyVersion>4.66.0.0</AssemblyVersion>
    <AssemblyVersion>4.66.1.0</AssemblyVersion>
    <AssemblyVersion>4.66.2.0</AssemblyVersion>
    <AssemblyVersion>4.67.0.0</AssemblyVersion>
    <AssemblyVersion>4.68.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Identity.Client.IApplicationBase</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Identity.Client.IClientApplicationBase</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Represents public client applications - desktop and mobile applications.
            </summary>
    <remarks>
            Public client applications are not trusted to safely keep application secrets and therefore they can only access web APIs in the name of the authenticating user.
            See <see href="https://aka.ms/msal-net-client-applications">Client Applications</see>.
            <para>
            Unlike <see cref="T:Microsoft.Identity.Client.IConfidentialClientApplication" />, public clients are unable to securely store secrets on a client device and as a result do not require the use of a client secret.
            </para><para>
            The redirect URI needed for interactive authentication is automatically determined by the library. It does not need to be passed explicitly in the constructor. Depending
            on the authentication strategy (e.g., through the <see href="https://aka.ms/msal-net-wam">Web Account Manager</see>, the Authenticator app, web browser, etc.), different redirect URIs will be used by MSAL. Redirect URIs must always be configured for the application in the Azure Portal.
            </para></remarks>
  </Docs>
  <Members>
    <Member MemberName="AcquireTokenByIntegratedWindowsAuth">
      <MemberSignature Language="C#" Value="public Microsoft.Identity.Client.AcquireTokenByIntegratedWindowsAuthParameterBuilder AcquireTokenByIntegratedWindowsAuth (System.Collections.Generic.IEnumerable&lt;string&gt; scopes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Identity.Client.AcquireTokenByIntegratedWindowsAuthParameterBuilder AcquireTokenByIntegratedWindowsAuth(class System.Collections.Generic.IEnumerable`1&lt;string&gt; scopes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.IPublicClientApplication.AcquireTokenByIntegratedWindowsAuth(System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Function AcquireTokenByIntegratedWindowsAuth (scopes As IEnumerable(Of String)) As AcquireTokenByIntegratedWindowsAuthParameterBuilder" />
      <MemberSignature Language="F#" Value="abstract member AcquireTokenByIntegratedWindowsAuth : seq&lt;string&gt; -&gt; Microsoft.Identity.Client.AcquireTokenByIntegratedWindowsAuthParameterBuilder" Usage="iPublicClientApplication.AcquireTokenByIntegratedWindowsAuth scopes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.AcquireTokenByIntegratedWindowsAuthParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="scopes">Scopes requested to access a protected API.</param>
        <summary>
          <para>
            This API is no longer recommended and will be deprecated in future versions in favor of 
            similar functionality via <see href="https://aka.ms/msal-net-wam">the Windows broker (WAM)</see>.
            WAM does not require any setup for desktop apps to login with the Windows account.
            </para>
          <para>
            Acquires a token non-interactively for the signed-in user in Windows
            via Integrated Windows Authentication.
            The account used in this overrides is pulled from the operating system as the current user principal name.
            This method does not look in the token cache, but stores the result in it. Before calling this method, use other methods 
            such as <see cref="M:Microsoft.Identity.Client.IClientApplicationBase.AcquireTokenSilent(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.IAccount)" /> to check the token cache.
            </para>
        </summary>
        <returns>A builder enabling you to add optional parameters before executing the token request.</returns>
        <remarks>
            See <see href="https://aka.ms/msal-net-iwa">our documentation</see> for more details.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcquireTokenByUsernamePassword">
      <MemberSignature Language="C#" Value="public Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder AcquireTokenByUsernamePassword (System.Collections.Generic.IEnumerable&lt;string&gt; scopes, string username, System.Security.SecureString password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder AcquireTokenByUsernamePassword(class System.Collections.Generic.IEnumerable`1&lt;string&gt; scopes, string username, class System.Security.SecureString password) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.IPublicClientApplication.AcquireTokenByUsernamePassword(System.Collections.Generic.IEnumerable{System.String},System.String,System.Security.SecureString)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcquireTokenByUsernamePassword (scopes As IEnumerable(Of String), username As String, password As SecureString) As AcquireTokenByUsernamePasswordParameterBuilder" />
      <MemberSignature Language="F#" Value="abstract member AcquireTokenByUsernamePassword : seq&lt;string&gt; * string * System.Security.SecureString -&gt; Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder" Usage="iPublicClientApplication.AcquireTokenByUsernamePassword (scopes, username, password)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("Using SecureString is not recommended. Use AcquireTokenByUsernamePassword(IEnumerable&lt;string&gt; scopes, string username, string password) instead.", false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Using SecureString is not recommended. Use AcquireTokenByUsernamePassword(IEnumerable&lt;string&gt; scopes, string username, string password) instead.", false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.Security.SecureString" />
      </Parameters>
      <Docs>
        <param name="scopes">Scopes requested to access a protected API</param>
        <param name="username">Identifier of the user application requests token on behalf.
            Generally in UserPrincipalName (UPN) format, e.g. <c>john.doe@contoso.com</c></param>
        <param name="password">User password as a secure string.</param>
        <summary>
            Non-interactive request to acquire a token via username and password authentication.
            </summary>
        <returns>A builder enabling you to add optional parameters before executing the token request</returns>
        <remarks>
            Available only for .NET Framework and .NET Core applications. See <see href="https://aka.ms/msal-net-up">our documentation</see> for details.       
            .NET no longer recommends using SecureString and MSAL puts the plaintext value of the password on the wire, as required by the OAuth protocol. See <see href="https://docs.microsoft.com/dotnet/api/system.security.securestring?view=net-6.0#remarks">SecureString documentation</see> for details.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcquireTokenByUsernamePassword">
      <MemberSignature Language="C#" Value="public Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder AcquireTokenByUsernamePassword (System.Collections.Generic.IEnumerable&lt;string&gt; scopes, string username, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder AcquireTokenByUsernamePassword(class System.Collections.Generic.IEnumerable`1&lt;string&gt; scopes, string username, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.IPublicClientApplication.AcquireTokenByUsernamePassword(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcquireTokenByUsernamePassword (scopes As IEnumerable(Of String), username As String, password As String) As AcquireTokenByUsernamePasswordParameterBuilder" />
      <MemberSignature Language="F#" Value="abstract member AcquireTokenByUsernamePassword : seq&lt;string&gt; * string * string -&gt; Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder" Usage="iPublicClientApplication.AcquireTokenByUsernamePassword (scopes, username, password)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="scopes">Scopes requested to access a protected API.</param>
        <param name="username">Identifier of the user application requests token on behalf.
            Generally in UserPrincipalName (UPN) format, e.g. <c>john.doe@contoso.com</c></param>
        <param name="password">User password as a string.</param>
        <summary>
            Acquires a token without user interaction using username and password authentication.
            This method does not look in the token cache, but stores the result in it. Before calling this method, use other methods 
            such as <see cref="M:Microsoft.Identity.Client.IClientApplicationBase.AcquireTokenSilent(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.IAccount)" /> to check the token cache.
            </summary>
        <returns>A builder enabling you to add optional parameters before executing the token request.</returns>
        <remarks>
            Available only for .NET Framework and .NET Core applications. See <see href="https://aka.ms/msal-net-up">our documentation</see> for details.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcquireTokenInteractive">
      <MemberSignature Language="C#" Value="public Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder AcquireTokenInteractive (System.Collections.Generic.IEnumerable&lt;string&gt; scopes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder AcquireTokenInteractive(class System.Collections.Generic.IEnumerable`1&lt;string&gt; scopes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.IPublicClientApplication.AcquireTokenInteractive(System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Function AcquireTokenInteractive (scopes As IEnumerable(Of String)) As AcquireTokenInteractiveParameterBuilder" />
      <MemberSignature Language="F#" Value="abstract member AcquireTokenInteractive : seq&lt;string&gt; -&gt; Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder" Usage="iPublicClientApplication.AcquireTokenInteractive scopes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="scopes">Scopes requested to access a protected API.</param>
        <summary>
            Acquires a token interactively for the specified scopes. Either a system browser, an embedded browser, or a broker will 
            handle this request, depending on the version of .NET framework used and on configuration. 
            For Microsoft Entra applications, a broker is recommended. See <see href="https://aka.ms/msal-net-wam">Windows Broker</see>.
            This method does not look in the token cache, but stores the result in it. Before calling this method, use other methods 
            such as <see cref="M:Microsoft.Identity.Client.IClientApplicationBase.AcquireTokenSilent(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.IAccount)" /> to check the token cache.
            See <see href="https://aka.ms/adal-to-msal-net/interactive">Interactive Authentication</see>.
            </summary>
        <returns>A builder enabling you to add optional parameters before executing the token request.</returns>
        <remarks>The user will be signed-in interactively and will consent to scopes, as well as perform a multi-factor authentication step if such a policy was enabled in the Azure AD tenant.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcquireTokenWithDeviceCode">
      <MemberSignature Language="C#" Value="public Microsoft.Identity.Client.AcquireTokenWithDeviceCodeParameterBuilder AcquireTokenWithDeviceCode (System.Collections.Generic.IEnumerable&lt;string&gt; scopes, Func&lt;Microsoft.Identity.Client.DeviceCodeResult,System.Threading.Tasks.Task&gt; deviceCodeResultCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Identity.Client.AcquireTokenWithDeviceCodeParameterBuilder AcquireTokenWithDeviceCode(class System.Collections.Generic.IEnumerable`1&lt;string&gt; scopes, class System.Func`2&lt;class Microsoft.Identity.Client.DeviceCodeResult, class System.Threading.Tasks.Task&gt; deviceCodeResultCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.IPublicClientApplication.AcquireTokenWithDeviceCode(System.Collections.Generic.IEnumerable{System.String},System.Func{Microsoft.Identity.Client.DeviceCodeResult,System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Function AcquireTokenWithDeviceCode (scopes As IEnumerable(Of String), deviceCodeResultCallback As Func(Of DeviceCodeResult, Task)) As AcquireTokenWithDeviceCodeParameterBuilder" />
      <MemberSignature Language="F#" Value="abstract member AcquireTokenWithDeviceCode : seq&lt;string&gt; * Func&lt;Microsoft.Identity.Client.DeviceCodeResult, System.Threading.Tasks.Task&gt; -&gt; Microsoft.Identity.Client.AcquireTokenWithDeviceCodeParameterBuilder" Usage="iPublicClientApplication.AcquireTokenWithDeviceCode (scopes, deviceCodeResultCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.AcquireTokenWithDeviceCodeParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="deviceCodeResultCallback" Type="System.Func&lt;Microsoft.Identity.Client.DeviceCodeResult,System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="scopes">Scopes requested to access a protected API.</param>
        <param name="deviceCodeResultCallback">Callback containing information to show the user about how to authenticate and enter the device code.</param>
        <summary>
            Acquires a token on a device without a web browser by letting the user authenticate on
            another device.
            This method does not look in the token cache, but stores the result in it. Before calling this method, use other methods 
            such as <see cref="M:Microsoft.Identity.Client.IClientApplicationBase.AcquireTokenSilent(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.IAccount)" /> to check the token cache.
            </summary>
        <returns>A builder enabling you to add optional parameters before executing the token request.</returns>
        <remarks>
            The token acquisition is done in two steps:
            <list type="bullet"><item><description>The method first acquires a device code from the authority and returns it to the caller via
            the <paramref name="deviceCodeResultCallback" />. This callback takes care of interacting with the user
            to direct them to authenticate (i.e., to a specific URL, with a code).</description></item><item><description>The method then proceeds to poll for the security
            token which is granted upon successful login by the user based on the device code information.</description></item></list>
            See <see href="https://aka.ms/msal-device-code-flow">Device Code Flow</see>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSystemWebViewAvailable">
      <MemberSignature Language="C#" Value="public bool IsSystemWebViewAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSystemWebViewAvailable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Identity.Client.IPublicClientApplication.IsSystemWebViewAvailable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSystemWebViewAvailable As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsSystemWebViewAvailable : bool" Usage="Microsoft.Identity.Client.IPublicClientApplication.IsSystemWebViewAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Tells if the application can use the system web browser, therefore enabling single-sign-on with web applications.
            By default, MSAL will try to use a system browser on the mobile platforms, if it is available.
            See <see href="https://aka.ms/msal-net-uses-web-browser">our documentation</see> for more details.
            </summary>
        <value>Returns <c>true</c> if MSAL can use the system web browser.</value>
        <remarks>
            On Windows, macOS, and Linux a system browser can always be used, except in cases where there is no UI (e.g., a SSH session).
            On Android, the browser must support tabs.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
