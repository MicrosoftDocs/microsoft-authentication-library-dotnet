<Type Name="ITokenCache" FullName="Microsoft.Identity.Client.ITokenCache">
  <TypeSignature Language="C#" Value="public interface ITokenCache" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit ITokenCache" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Identity.Client.ITokenCache" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITokenCache" />
  <TypeSignature Language="F#" Value="type ITokenCache = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Identity.Client</AssemblyName>
    <AssemblyVersion>4.48.1.0</AssemblyVersion>
    <AssemblyVersion>4.49.1.0</AssemblyVersion>
    <AssemblyVersion>4.51.0.0</AssemblyVersion>
    <AssemblyVersion>4.52.0.0</AssemblyVersion>
    <AssemblyVersion>4.53.0.0</AssemblyVersion>
    <AssemblyVersion>4.54.0.0</AssemblyVersion>
    <AssemblyVersion>4.54.1.0</AssemblyVersion>
    <AssemblyVersion>4.55.0.0</AssemblyVersion>
    <AssemblyVersion>4.56.0.0</AssemblyVersion>
    <AssemblyVersion>4.57.0.0</AssemblyVersion>
    <AssemblyVersion>4.58.0.0</AssemblyVersion>
    <AssemblyVersion>4.58.1.0</AssemblyVersion>
    <AssemblyVersion>4.59.0.0</AssemblyVersion>
    <AssemblyVersion>4.60.0.0</AssemblyVersion>
    <AssemblyVersion>4.60.1.0</AssemblyVersion>
    <AssemblyVersion>4.60.2.0</AssemblyVersion>
    <AssemblyVersion>4.60.3.0</AssemblyVersion>
    <AssemblyVersion>4.61.0.0</AssemblyVersion>
    <AssemblyVersion>4.61.1.0</AssemblyVersion>
    <AssemblyVersion>4.61.3.0</AssemblyVersion>
    <AssemblyVersion>4.62.0.0</AssemblyVersion>
    <AssemblyVersion>4.63.0.0</AssemblyVersion>
    <AssemblyVersion>4.64.0.0</AssemblyVersion>
    <AssemblyVersion>4.64.1.0</AssemblyVersion>
    <AssemblyVersion>4.65.0.0</AssemblyVersion>
    <AssemblyVersion>4.66.0.0</AssemblyVersion>
    <AssemblyVersion>4.66.1.0</AssemblyVersion>
    <AssemblyVersion>4.66.2.0</AssemblyVersion>
    <AssemblyVersion>4.67.0.0</AssemblyVersion>
    <AssemblyVersion>4.68.0.0</AssemblyVersion>
    <AssemblyVersion>4.70.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            This is the interface that implements the public access to cache operations.
            With CacheV2, this should only be necessary if the caller is persisting
            the cache in their own store, since this will provide the serialize/deserialize
            and before/after notifications used in that scenario.
            See https://aka.ms/aka.ms/msal-net-token-cache-serialization
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="SetAfterAccess">
      <MemberSignature Language="C#" Value="public void SetAfterAccess (Microsoft.Identity.Client.TokenCacheCallback afterAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAfterAccess(class Microsoft.Identity.Client.TokenCacheCallback afterAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ITokenCache.SetAfterAccess(Microsoft.Identity.Client.TokenCacheCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAfterAccess (afterAccess As TokenCacheCallback)" />
      <MemberSignature Language="F#" Value="abstract member SetAfterAccess : Microsoft.Identity.Client.TokenCacheCallback -&gt; unit" Usage="iTokenCache.SetAfterAccess afterAccess" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.70.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="afterAccess" Type="Microsoft.Identity.Client.TokenCacheCallback" />
      </Parameters>
      <Docs>
        <param name="afterAccess">Delegate set in order to handle the cache serialization</param>
        <summary>
            Sets a delegate to be notified after any library method accesses the cache. This gives an option to the
            delegate to serialize a cache entry for the application and accounts specified in the <see cref="T:Microsoft.Identity.Client.TokenCacheNotificationArgs" />.
            See https://aka.ms/msal-net-token-cache-serialization.
            If you need async/task-based callbacks, please use SetAfterAccessAsync instead.
            </summary>
        <remarks>In the case where the delegate is used to serialize the cache entirely (not just a row), it might
            want to call <see cref="M:Microsoft.Identity.Client.ITokenCacheSerializer.SerializeMsalV3" /></remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAfterAccessAsync">
      <MemberSignature Language="C#" Value="public void SetAfterAccessAsync (Func&lt;Microsoft.Identity.Client.TokenCacheNotificationArgs,System.Threading.Tasks.Task&gt; afterAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAfterAccessAsync(class System.Func`2&lt;class Microsoft.Identity.Client.TokenCacheNotificationArgs, class System.Threading.Tasks.Task&gt; afterAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ITokenCache.SetAfterAccessAsync(System.Func{Microsoft.Identity.Client.TokenCacheNotificationArgs,System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAfterAccessAsync (afterAccess As Func(Of TokenCacheNotificationArgs, Task))" />
      <MemberSignature Language="F#" Value="abstract member SetAfterAccessAsync : Func&lt;Microsoft.Identity.Client.TokenCacheNotificationArgs, System.Threading.Tasks.Task&gt; -&gt; unit" Usage="iTokenCache.SetAfterAccessAsync afterAccess" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.70.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="afterAccess" Type="System.Func&lt;Microsoft.Identity.Client.TokenCacheNotificationArgs,System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="afterAccess">Delegate set in order to handle the cache serialization </param>
        <summary>
            Sets a delegate to be notified after any library method accesses the cache. This gives an option to the
            delegate to serialize a cache entry for the application and accounts specified in the <see cref="T:Microsoft.Identity.Client.TokenCacheNotificationArgs" />.
            See https://aka.ms/msal-net-token-cache-serialization.
            This provides the same functionality as SetAfterAccess but it provides for an async/task-based callback.
            </summary>
        <remarks>In the case where the delegate is used to serialize the cache entirely (not just a row), it might
            want to call <see cref="M:Microsoft.Identity.Client.ITokenCacheSerializer.SerializeMsalV3" /></remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBeforeAccess">
      <MemberSignature Language="C#" Value="public void SetBeforeAccess (Microsoft.Identity.Client.TokenCacheCallback beforeAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBeforeAccess(class Microsoft.Identity.Client.TokenCacheCallback beforeAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ITokenCache.SetBeforeAccess(Microsoft.Identity.Client.TokenCacheCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetBeforeAccess (beforeAccess As TokenCacheCallback)" />
      <MemberSignature Language="F#" Value="abstract member SetBeforeAccess : Microsoft.Identity.Client.TokenCacheCallback -&gt; unit" Usage="iTokenCache.SetBeforeAccess beforeAccess" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.70.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beforeAccess" Type="Microsoft.Identity.Client.TokenCacheCallback" />
      </Parameters>
      <Docs>
        <param name="beforeAccess">Delegate set in order to handle the cache deserialization</param>
        <summary>
            Sets a delegate to be notified before any library method accesses the cache. This gives an option to the
            delegate to deserialize a cache entry for the application and accounts specified in the <see cref="T:Microsoft.Identity.Client.TokenCacheNotificationArgs" />.
            See https://aka.ms/msal-net-token-cache-serialization.
            If you need async/task-based callbacks, please use SetBeforeAccessAsync instead.
            </summary>
        <remarks>When the delegate is used to deserialize the cache, it might
            want to call <see cref="M:Microsoft.Identity.Client.ITokenCacheSerializer.DeserializeMsalV3(System.Byte[],System.Boolean)" /></remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBeforeAccessAsync">
      <MemberSignature Language="C#" Value="public void SetBeforeAccessAsync (Func&lt;Microsoft.Identity.Client.TokenCacheNotificationArgs,System.Threading.Tasks.Task&gt; beforeAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBeforeAccessAsync(class System.Func`2&lt;class Microsoft.Identity.Client.TokenCacheNotificationArgs, class System.Threading.Tasks.Task&gt; beforeAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ITokenCache.SetBeforeAccessAsync(System.Func{Microsoft.Identity.Client.TokenCacheNotificationArgs,System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetBeforeAccessAsync (beforeAccess As Func(Of TokenCacheNotificationArgs, Task))" />
      <MemberSignature Language="F#" Value="abstract member SetBeforeAccessAsync : Func&lt;Microsoft.Identity.Client.TokenCacheNotificationArgs, System.Threading.Tasks.Task&gt; -&gt; unit" Usage="iTokenCache.SetBeforeAccessAsync beforeAccess" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.70.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beforeAccess" Type="System.Func&lt;Microsoft.Identity.Client.TokenCacheNotificationArgs,System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="beforeAccess">Delegate set in order to handle the cache deserialization</param>
        <summary>
            Sets a delegate to be notified before any library method accesses the cache. This gives an option to the
            delegate to deserialize a cache entry for the application and accounts specified in the <see cref="T:Microsoft.Identity.Client.TokenCacheNotificationArgs" />.
            See https://aka.ms/msal-net-token-cache-serialization.
            This provides the same functionality as SetBeforeAccess but it provides for an async/task-based callback.
            </summary>
        <remarks>In the case where the delegate is used to deserialize the cache, it might
            want to call <see cref="M:Microsoft.Identity.Client.ITokenCacheSerializer.DeserializeMsalV3(System.Byte[],System.Boolean)" /></remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBeforeWrite">
      <MemberSignature Language="C#" Value="public void SetBeforeWrite (Microsoft.Identity.Client.TokenCacheCallback beforeWrite);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBeforeWrite(class Microsoft.Identity.Client.TokenCacheCallback beforeWrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ITokenCache.SetBeforeWrite(Microsoft.Identity.Client.TokenCacheCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetBeforeWrite (beforeWrite As TokenCacheCallback)" />
      <MemberSignature Language="F#" Value="abstract member SetBeforeWrite : Microsoft.Identity.Client.TokenCacheCallback -&gt; unit" Usage="iTokenCache.SetBeforeWrite beforeWrite" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.70.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beforeWrite" Type="Microsoft.Identity.Client.TokenCacheCallback" />
      </Parameters>
      <Docs>
        <param name="beforeWrite">Delegate set in order to prepare the cache serialization</param>
        <summary>
            Sets a delegate called before any library method writes to the cache. This gives an option to the delegate
            to reload the cache state from a row in database and lock that row. That database row can then be unlocked in the delegate
            registered with <see cref="M:Microsoft.Identity.Client.ITokenCache.SetAfterAccess(Microsoft.Identity.Client.TokenCacheCallback)" />
            If you need async/task-based callbacks, please use SetBeforeWriteAsync instead.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBeforeWriteAsync">
      <MemberSignature Language="C#" Value="public void SetBeforeWriteAsync (Func&lt;Microsoft.Identity.Client.TokenCacheNotificationArgs,System.Threading.Tasks.Task&gt; beforeWrite);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBeforeWriteAsync(class System.Func`2&lt;class Microsoft.Identity.Client.TokenCacheNotificationArgs, class System.Threading.Tasks.Task&gt; beforeWrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ITokenCache.SetBeforeWriteAsync(System.Func{Microsoft.Identity.Client.TokenCacheNotificationArgs,System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetBeforeWriteAsync (beforeWrite As Func(Of TokenCacheNotificationArgs, Task))" />
      <MemberSignature Language="F#" Value="abstract member SetBeforeWriteAsync : Func&lt;Microsoft.Identity.Client.TokenCacheNotificationArgs, System.Threading.Tasks.Task&gt; -&gt; unit" Usage="iTokenCache.SetBeforeWriteAsync beforeWrite" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.70.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beforeWrite" Type="System.Func&lt;Microsoft.Identity.Client.TokenCacheNotificationArgs,System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="beforeWrite">Delegate set in order to prepare the cache serialization</param>
        <summary>
            Sets a delegate called before any library method writes to the cache. This gives an option to the delegate
            to reload the cache state from a row in database and lock that row. That database row can then be unlocked in the delegate
            registered with <see cref="M:Microsoft.Identity.Client.ITokenCache.SetAfterAccess(Microsoft.Identity.Client.TokenCacheCallback)" />
            This provides the same functionality as SetBeforeWrite but it provides for an async/task-based callback.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
