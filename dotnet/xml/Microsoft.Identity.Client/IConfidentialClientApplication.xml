<Type Name="IConfidentialClientApplication" FullName="Microsoft.Identity.Client.IConfidentialClientApplication">
  <TypeSignature Language="C#" Value="public interface IConfidentialClientApplication : Microsoft.Identity.Client.IClientApplicationBase" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IConfidentialClientApplication implements class Microsoft.Identity.Client.IApplicationBase, class Microsoft.Identity.Client.IClientApplicationBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Identity.Client.IConfidentialClientApplication" />
  <TypeSignature Language="VB.NET" Value="Public Interface IConfidentialClientApplication&#xA;Implements IClientApplicationBase" />
  <TypeSignature Language="F#" Value="type IConfidentialClientApplication = interface&#xA;    interface IClientApplicationBase&#xA;    interface IApplicationBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Identity.Client</AssemblyName>
    <AssemblyVersion>4.48.1.0</AssemblyVersion>
    <AssemblyVersion>4.49.1.0</AssemblyVersion>
    <AssemblyVersion>4.51.0.0</AssemblyVersion>
    <AssemblyVersion>4.52.0.0</AssemblyVersion>
    <AssemblyVersion>4.53.0.0</AssemblyVersion>
    <AssemblyVersion>4.54.0.0</AssemblyVersion>
    <AssemblyVersion>4.54.1.0</AssemblyVersion>
    <AssemblyVersion>4.55.0.0</AssemblyVersion>
    <AssemblyVersion>4.56.0.0</AssemblyVersion>
    <AssemblyVersion>4.57.0.0</AssemblyVersion>
    <AssemblyVersion>4.58.0.0</AssemblyVersion>
    <AssemblyVersion>4.58.1.0</AssemblyVersion>
    <AssemblyVersion>4.59.0.0</AssemblyVersion>
    <AssemblyVersion>4.60.0.0</AssemblyVersion>
    <AssemblyVersion>4.60.1.0</AssemblyVersion>
    <AssemblyVersion>4.60.2.0</AssemblyVersion>
    <AssemblyVersion>4.60.3.0</AssemblyVersion>
    <AssemblyVersion>4.61.0.0</AssemblyVersion>
    <AssemblyVersion>4.61.1.0</AssemblyVersion>
    <AssemblyVersion>4.61.3.0</AssemblyVersion>
    <AssemblyVersion>4.62.0.0</AssemblyVersion>
    <AssemblyVersion>4.63.0.0</AssemblyVersion>
    <AssemblyVersion>4.64.0.0</AssemblyVersion>
    <AssemblyVersion>4.64.1.0</AssemblyVersion>
    <AssemblyVersion>4.65.0.0</AssemblyVersion>
    <AssemblyVersion>4.66.0.0</AssemblyVersion>
    <AssemblyVersion>4.66.1.0</AssemblyVersion>
    <AssemblyVersion>4.66.2.0</AssemblyVersion>
    <AssemblyVersion>4.67.0.0</AssemblyVersion>
    <AssemblyVersion>4.67.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Identity.Client.IApplicationBase</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Identity.Client.IClientApplicationBase</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Represents confidential client applications - web apps, web APIs, daemon applications.
            </summary>
    <remarks>
            Confidential client applications are typically applications which run on servers (web apps, web API, or even service/daemon applications).
            They are considered difficult to access, and therefore capable of keeping an application secret (hold configuration
            time secrets as these values would be difficult for end users to extract).
            A web app is the most common confidential client. The client ID is exposed through the web browser, but the secret is passed only in the back channel
            and never directly exposed. For details, see <see href="https://aka.ms/msal-net-client-applications">Client Applications</see>.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="AcquireTokenByAuthorizationCode">
      <MemberSignature Language="C#" Value="public Microsoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder AcquireTokenByAuthorizationCode (System.Collections.Generic.IEnumerable&lt;string&gt; scopes, string authorizationCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder AcquireTokenByAuthorizationCode(class System.Collections.Generic.IEnumerable`1&lt;string&gt; scopes, string authorizationCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.IConfidentialClientApplication.AcquireTokenByAuthorizationCode(System.Collections.Generic.IEnumerable{System.String},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcquireTokenByAuthorizationCode (scopes As IEnumerable(Of String), authorizationCode As String) As AcquireTokenByAuthorizationCodeParameterBuilder" />
      <MemberSignature Language="F#" Value="abstract member AcquireTokenByAuthorizationCode : seq&lt;string&gt; * string -&gt; Microsoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder" Usage="iConfidentialClientApplication.AcquireTokenByAuthorizationCode (scopes, authorizationCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.67.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="authorizationCode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="scopes">Scopes requested to access a protected API.</param>
        <param name="authorizationCode">The authorization code received from the service authorization endpoint.</param>
        <summary>
            Acquires a token from the authority configured in the app using the authorization code
            previously received from the identity provider using the OAuth 2.0 authorization code flow.
            See <see href="https://aka.ms/msal-net-authorization-code">Authorization Code Flow</see>.
            This flow is usually used in web apps (for instance, ASP.NET and ASP.NET Core web apps)
            which sign-in users and can request an authorization code.
            This method does not look in the token cache, but stores the result in it. Before calling this method, use other methods 
            such as <see cref="M:Microsoft.Identity.Client.IClientApplicationBase.AcquireTokenSilent(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.IAccount)" /> to check the token cache.
            </summary>
        <returns>A builder enabling you to add optional parameters before executing the token request.</returns>
        <remarks>You can set optional parameters by chaining the builder with, for example 
            <see cref="M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithExtraQueryParameters(System.Collections.Generic.Dictionary{System.String,System.String})" />,
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcquireTokenForClient">
      <MemberSignature Language="C#" Value="public Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder AcquireTokenForClient (System.Collections.Generic.IEnumerable&lt;string&gt; scopes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder AcquireTokenForClient(class System.Collections.Generic.IEnumerable`1&lt;string&gt; scopes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.IConfidentialClientApplication.AcquireTokenForClient(System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Function AcquireTokenForClient (scopes As IEnumerable(Of String)) As AcquireTokenForClientParameterBuilder" />
      <MemberSignature Language="F#" Value="abstract member AcquireTokenForClient : seq&lt;string&gt; -&gt; Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder" Usage="iConfidentialClientApplication.AcquireTokenForClient scopes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.67.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="scopes">Scopes requested to access a protected API. For this flow (client credentials), the scopes
            should be in the form of "{ResourceIdUri/.default}" for instance <c>https://management.azure.net/.default</c> or, for Microsoft
            Graph, <c>https://graph.microsoft.com/.default</c> as the requested scopes are defined statically in the application registration
            in the portal, and cannot be overridden in the application.</param>
        <summary>
            Acquires a token from the authority configured in the app for the confidential client itself (not for a user)
            using the client credentials flow. See <see href="https://aka.ms/msal-net-client-credentials">Client Credentials Flow</see>.
            During this operation MSAL will first search in the cache for an unexpired token before acquiring a new one from Microsoft Entra ID.
            </summary>
        <returns>A builder enabling you to add optional parameters before executing the token request.</returns>
        <remarks>You can also chain the following optional parameters:
            <see cref="M:Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder.WithForceRefresh(System.Boolean)" /><see cref="M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithExtraQueryParameters(System.Collections.Generic.Dictionary{System.String,System.String})" /></remarks>
      </Docs>
    </Member>
    <Member MemberName="AcquireTokenOnBehalfOf">
      <MemberSignature Language="C#" Value="public Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder AcquireTokenOnBehalfOf (System.Collections.Generic.IEnumerable&lt;string&gt; scopes, Microsoft.Identity.Client.UserAssertion userAssertion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder AcquireTokenOnBehalfOf(class System.Collections.Generic.IEnumerable`1&lt;string&gt; scopes, class Microsoft.Identity.Client.UserAssertion userAssertion) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.IConfidentialClientApplication.AcquireTokenOnBehalfOf(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.UserAssertion)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcquireTokenOnBehalfOf (scopes As IEnumerable(Of String), userAssertion As UserAssertion) As AcquireTokenOnBehalfOfParameterBuilder" />
      <MemberSignature Language="F#" Value="abstract member AcquireTokenOnBehalfOf : seq&lt;string&gt; * Microsoft.Identity.Client.UserAssertion -&gt; Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder" Usage="iConfidentialClientApplication.AcquireTokenOnBehalfOf (scopes, userAssertion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.67.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="userAssertion" Type="Microsoft.Identity.Client.UserAssertion" />
      </Parameters>
      <Docs>
        <param name="scopes">Scopes requested to access a protected API.</param>
        <param name="userAssertion">Instance of <see cref="T:Microsoft.Identity.Client.UserAssertion" /> containing credential information about
            the user on behalf of whom to get a token.</param>
        <summary>
            Acquires an access token for this application (usually a web API) from the authority configured in the application,
            in order to access another downstream protected web API on behalf of a user using the OAuth 2.0 On-Behalf-Of flow.
            During this operation MSAL will first search in the cache for an unexpired token before acquiring a new one from Microsoft Entra ID.
            See <see href="https://aka.ms/msal-net-on-behalf-of">On-Behalf-Of Flow</see>.
            </summary>
        <returns>A builder enabling you to add optional parameters before executing the token request.</returns>
        <remarks>
            Pass an access token (not an ID token) which was used to access this application in the
            <paramref name="userAssertion">userAssertion</paramref> parameter.
            For long-running or background processes in web API, see <see href="https://aka.ms/msal-net-long-running-obo">Long-running OBO in MSAL.NET</see>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcquireTokenSilent">
      <MemberSignature Language="C#" Value="public Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder AcquireTokenSilent (System.Collections.Generic.IEnumerable&lt;string&gt; scopes, string loginHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder AcquireTokenSilent(class System.Collections.Generic.IEnumerable`1&lt;string&gt; scopes, string loginHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.IConfidentialClientApplication.AcquireTokenSilent(System.Collections.Generic.IEnumerable{System.String},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcquireTokenSilent (scopes As IEnumerable(Of String), loginHint As String) As AcquireTokenSilentParameterBuilder" />
      <MemberSignature Language="F#" Value="abstract member AcquireTokenSilent : seq&lt;string&gt; * string -&gt; Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder" Usage="iConfidentialClientApplication.AcquireTokenSilent (scopes, loginHint)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Identity.Client.IClientApplicationBase.AcquireTokenSilent(System.Collections.Generic.IEnumerable{System.String},System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.67.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("In confidential client apps use AcquireTokenSilent(scopes, account) instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("In confidential client apps use AcquireTokenSilent(scopes, account) instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="loginHint" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="scopes">To be added.</param>
        <param name="loginHint">To be added.</param>
        <summary>
            In confidential client apps use <see cref="M:Microsoft.Identity.Client.IClientApplicationBase.AcquireTokenSilent(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.IAccount)" /> instead.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppTokenCache">
      <MemberSignature Language="C#" Value="public Microsoft.Identity.Client.ITokenCache AppTokenCache { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Identity.Client.ITokenCache AppTokenCache" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Identity.Client.IConfidentialClientApplication.AppTokenCache" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AppTokenCache As ITokenCache" />
      <MemberSignature Language="F#" Value="member this.AppTokenCache : Microsoft.Identity.Client.ITokenCache" Usage="Microsoft.Identity.Client.IConfidentialClientApplication.AppTokenCache" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.67.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.ITokenCache</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Application token cache which holds access tokens for this application. It's maintained
            and updated silently when calling <see cref="M:Microsoft.Identity.Client.IConfidentialClientApplication.AcquireTokenForClient(System.Collections.Generic.IEnumerable{System.String})" /></summary>
        <value>To be added.</value>
        <remarks>On .NET Framework and .NET Core you can also customize the token cache serialization.
            See <see href="https://aka.ms/msal-net-token-cache-serialization">Token Cache Serialization</see>. This is taken care of by MSAL.NET on other platforms.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccountsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.Identity.Client.IAccount&gt;&gt; GetAccountsAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Identity.Client.IAccount&gt;&gt; GetAccountsAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.IConfidentialClientApplication.GetAccountsAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccountsAsync () As Task(Of IEnumerable(Of IAccount))" />
      <MemberSignature Language="F#" Value="abstract member GetAccountsAsync : unit -&gt; System.Threading.Tasks.Task&lt;seq&lt;Microsoft.Identity.Client.IAccount&gt;&gt;" Usage="iConfidentialClientApplication.GetAccountsAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Identity.Client.IClientApplicationBase.GetAccountsAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.67.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("Use GetAccountAsync(identifier) in web apps and web APIs, and use a token cache serializer for better security and performance. See https://aka.ms/msal-net-cca-token-cache-serialization.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use GetAccountAsync(identifier) in web apps and web APIs, and use a token cache serializer for better security and performance. See https://aka.ms/msal-net-cca-token-cache-serialization.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.Identity.Client.IAccount&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Use <see cref="M:Microsoft.Identity.Client.IClientApplicationBase.GetAccountAsync(System.String)" /> in web apps and web APIs, and use a token cache serializer for better security and performance. See https://aka.ms/msal-net-cca-token-cache-serialization.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAuthorizationRequestUrl">
      <MemberSignature Language="C#" Value="public Microsoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder GetAuthorizationRequestUrl (System.Collections.Generic.IEnumerable&lt;string&gt; scopes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder GetAuthorizationRequestUrl(class System.Collections.Generic.IEnumerable`1&lt;string&gt; scopes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.IConfidentialClientApplication.GetAuthorizationRequestUrl(System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAuthorizationRequestUrl (scopes As IEnumerable(Of String)) As GetAuthorizationRequestUrlParameterBuilder" />
      <MemberSignature Language="F#" Value="abstract member GetAuthorizationRequestUrl : seq&lt;string&gt; -&gt; Microsoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder" Usage="iConfidentialClientApplication.GetAuthorizationRequestUrl scopes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.67.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="scopes">Scopes requested to access a protected API.</param>
        <summary>
            Computes the URL of the authorization request letting the user sign-in and consent to the application accessing specific scopes in
            the user's name. The URL targets the /authorize endpoint of the authority configured in the application.
            </summary>
        <returns>A builder enabling you to add optional parameters before executing the token request to get the
            URL of the authorization endpoint with the specified parameters.</returns>
        <remarks>You can also chain the following optional parameters:
            <see cref="M:Microsoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder.WithRedirectUri(System.String)" /><see cref="M:Microsoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder.WithLoginHint(System.String)" /><see cref="M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithExtraQueryParameters(System.Collections.Generic.Dictionary{System.String,System.String})" /><see cref="M:Microsoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder.WithExtraScopesToConsent(System.Collections.Generic.IEnumerable{System.String})" /></remarks>
      </Docs>
    </Member>
  </Members>
</Type>
