<Type Name="ConfidentialClientApplicationBuilderForResourceProviders" FullName="Microsoft.Identity.Client.RP.ConfidentialClientApplicationBuilderForResourceProviders">
  <TypeSignature Language="C#" Value="public static class ConfidentialClientApplicationBuilderForResourceProviders" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ConfidentialClientApplicationBuilderForResourceProviders extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Identity.Client.RP.ConfidentialClientApplicationBuilderForResourceProviders" />
  <TypeSignature Language="VB.NET" Value="Public Module ConfidentialClientApplicationBuilderForResourceProviders" />
  <TypeSignature Language="F#" Value="type ConfidentialClientApplicationBuilderForResourceProviders = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Identity.Client</AssemblyName>
    <AssemblyVersion>4.69.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Resource Provider extensibility methods for <see cref="T:Microsoft.Identity.Client.ConfidentialClientApplicationBuilder" /></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="WithCertificate">
      <MemberSignature Language="C#" Value="public static Microsoft.Identity.Client.ConfidentialClientApplicationBuilder WithCertificate (this Microsoft.Identity.Client.ConfidentialClientApplicationBuilder builder, System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, bool sendX5C, bool associateTokensWithCertificateSerialNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Identity.Client.ConfidentialClientApplicationBuilder WithCertificate(class Microsoft.Identity.Client.ConfidentialClientApplicationBuilder builder, class System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, bool sendX5C, bool associateTokensWithCertificateSerialNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.RP.ConfidentialClientApplicationBuilderForResourceProviders.WithCertificate(Microsoft.Identity.Client.ConfidentialClientApplicationBuilder,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WithCertificate (builder As ConfidentialClientApplicationBuilder, certificate As X509Certificate2, sendX5C As Boolean, associateTokensWithCertificateSerialNumber As Boolean) As ConfidentialClientApplicationBuilder" />
      <MemberSignature Language="F#" Value="static member WithCertificate : Microsoft.Identity.Client.ConfidentialClientApplicationBuilder * System.Security.Cryptography.X509Certificates.X509Certificate2 * bool * bool -&gt; Microsoft.Identity.Client.ConfidentialClientApplicationBuilder" Usage="Microsoft.Identity.Client.RP.ConfidentialClientApplicationBuilderForResourceProviders.WithCertificate (builder, certificate, sendX5C, associateTokensWithCertificateSerialNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.69.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.ConfidentialClientApplicationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Identity.Client.ConfidentialClientApplicationBuilder" RefType="this" />
        <Parameter Name="certificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" />
        <Parameter Name="sendX5C" Type="System.Boolean" />
        <Parameter Name="associateTokensWithCertificateSerialNumber" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="builder" />
        <param name="certificate">The X509 certificate used as credentials to prove the identity of the application to Azure AD.</param>
        <param name="sendX5C">To send X5C with every request or not. The default is <c>false</c></param>
        <param name="associateTokensWithCertificateSerialNumber">Determines if the application tokens acquired from Azure AD are associated with the certificate serial number</param>
        <summary>
            Sets the certificate associated with the application.
            Applicable to first-party applications only, this method also allows to specify 
            if the <see href="https://datatracker.ietf.org/doc/html/rfc7517#section-4.7">x5c claim</see> should be sent to Azure AD.
            Sending the x5c enables application developers to achieve easy certificate roll-over in Azure AD:
            this method will send the certificate chain to Azure AD along with the token request,
            so that Azure AD can use it to validate the subject name based on a trusted issuer policy.
            This saves the application admin from the need to explicitly manage the certificate rollover
            (either via portal or PowerShell/CLI operation). For details see https://aka.ms/msal-net-sni
            This API allow you to associate the tokens acquired from Azure AD with the certificate serial number. 
            This can be used to partition the cache by certificate. Tokens acquired with one certificate will not be accessible to another certificate with a different serial number.
            </summary>
        <returns>To be added.</returns>
        <remarks>You should use certificates with a private key size of at least 2048 bytes. Future versions of this library might reject certificates with smaller keys. </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
