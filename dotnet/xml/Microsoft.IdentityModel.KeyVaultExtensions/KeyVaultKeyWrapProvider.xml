<Type Name="KeyVaultKeyWrapProvider" FullName="Microsoft.IdentityModel.KeyVaultExtensions.KeyVaultKeyWrapProvider">
  <TypeSignature Language="C#" Value="public class KeyVaultKeyWrapProvider : Microsoft.IdentityModel.Tokens.KeyWrapProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyVaultKeyWrapProvider extends Microsoft.IdentityModel.Tokens.KeyWrapProvider" />
  <TypeSignature Language="DocId" Value="T:Microsoft.IdentityModel.KeyVaultExtensions.KeyVaultKeyWrapProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyVaultKeyWrapProvider&#xA;Inherits KeyWrapProvider" />
  <TypeSignature Language="F#" Value="type KeyVaultKeyWrapProvider = class&#xA;    inherit KeyWrapProvider" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.IdentityModel.KeyVaultExtensions</AssemblyName>
    <AssemblyVersion>6.27.0.0</AssemblyVersion>
    <AssemblyVersion>6.28.1.0</AssemblyVersion>
    <AssemblyVersion>6.29.0.0</AssemblyVersion>
    <AssemblyVersion>6.30.0.0</AssemblyVersion>
    <AssemblyVersion>6.30.1.0</AssemblyVersion>
    <AssemblyVersion>6.31.0.0</AssemblyVersion>
    <AssemblyVersion>6.32.0.0</AssemblyVersion>
    <AssemblyVersion>6.32.1.0</AssemblyVersion>
    <AssemblyVersion>6.32.2.0</AssemblyVersion>
    <AssemblyVersion>6.32.3.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.2.0</AssemblyVersion>
    <AssemblyVersion>7.0.3.0</AssemblyVersion>
    <AssemblyVersion>7.2.0.0</AssemblyVersion>
    <AssemblyVersion>7.3.1.0</AssemblyVersion>
    <AssemblyVersion>7.4.0.0</AssemblyVersion>
    <AssemblyVersion>7.4.1.0</AssemblyVersion>
    <AssemblyVersion>7.5.0.0</AssemblyVersion>
    <AssemblyVersion>7.5.1.0</AssemblyVersion>
    <AssemblyVersion>7.5.2.0</AssemblyVersion>
    <AssemblyVersion>7.6.0.0</AssemblyVersion>
    <AssemblyVersion>7.6.2.0</AssemblyVersion>
    <AssemblyVersion>7.6.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.IdentityModel.Tokens.KeyWrapProvider</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Provides wrap and unwrap operations using Azure Key Vault.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyVaultKeyWrapProvider (Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.KeyVaultExtensions.KeyVaultKeyWrapProvider.#ctor(Microsoft.IdentityModel.Tokens.SecurityKey,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As SecurityKey, algorithm As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.IdentityModel.KeyVaultExtensions.KeyVaultKeyWrapProvider : Microsoft.IdentityModel.Tokens.SecurityKey * string -&gt; Microsoft.IdentityModel.KeyVaultExtensions.KeyVaultKeyWrapProvider" Usage="new Microsoft.IdentityModel.KeyVaultExtensions.KeyVaultKeyWrapProvider (key, algorithm)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.KeyVaultExtensions</AssemblyName>
        <AssemblyVersion>7.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.IdentityModel.Tokens.SecurityKey" />
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> that will be used for key wrap operations.</param>
        <param name="algorithm">The key wrap algorithm to apply.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.IdentityModel.KeyVaultExtensions.KeyVaultKeyWrapProvider" /> class.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">if <paramref name="algorithm" /> is null or empty.</exception>
        <exception cref="T:System.NotSupportedException">if <paramref name="key" /> is not a <see cref="T:Microsoft.IdentityModel.KeyVaultExtensions.KeyVaultSecurityKey" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Algorithm">
      <MemberSignature Language="C#" Value="public override string Algorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Algorithm" />
      <MemberSignature Language="DocId" Value="P:Microsoft.IdentityModel.KeyVaultExtensions.KeyVaultKeyWrapProvider.Algorithm" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Algorithm As String" />
      <MemberSignature Language="F#" Value="member this.Algorithm : string" Usage="Microsoft.IdentityModel.KeyVaultExtensions.KeyVaultKeyWrapProvider.Algorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.KeyVaultExtensions</AssemblyName>
        <AssemblyVersion>7.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the KeyWrap algorithm that is being used.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public override string? Context { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Context" />
      <MemberSignature Language="DocId" Value="P:Microsoft.IdentityModel.KeyVaultExtensions.KeyVaultKeyWrapProvider.Context" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Context As String" />
      <MemberSignature Language="F#" Value="member this.Context : string with get, set" Usage="Microsoft.IdentityModel.KeyVaultExtensions.KeyVaultKeyWrapProvider.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.KeyVaultExtensions</AssemblyName>
        <AssemblyVersion>7.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a user context for a <see cref="T:Microsoft.IdentityModel.Tokens.KeyWrapProvider" />.
            </summary>
        <value>To be added.</value>
        <remarks>This is null by default. This can be used by runtimes or for extensibility scenarios.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.KeyVaultExtensions.KeyVaultKeyWrapProvider.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="keyVaultKeyWrapProvider.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.KeyVaultExtensions</AssemblyName>
        <AssemblyVersion>7.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">true, if called from Dispose(), false, if invoked inside a finalizer</param>
        <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public override Microsoft.IdentityModel.Tokens.SecurityKey Key { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.IdentityModel.Tokens.SecurityKey Key" />
      <MemberSignature Language="DocId" Value="P:Microsoft.IdentityModel.KeyVaultExtensions.KeyVaultKeyWrapProvider.Key" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Key As SecurityKey" />
      <MemberSignature Language="F#" Value="member this.Key : Microsoft.IdentityModel.Tokens.SecurityKey" Usage="Microsoft.IdentityModel.KeyVaultExtensions.KeyVaultKeyWrapProvider.Key" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.KeyVaultExtensions</AssemblyName>
        <AssemblyVersion>7.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.IdentityModel.Tokens.SecurityKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> that is being used.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnwrapKey">
      <MemberSignature Language="C#" Value="public override byte[] UnwrapKey (byte[] keyBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] UnwrapKey(unsigned int8[] keyBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.KeyVaultExtensions.KeyVaultKeyWrapProvider.UnwrapKey(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function UnwrapKey (keyBytes As Byte()) As Byte()" />
      <MemberSignature Language="F#" Value="override this.UnwrapKey : byte[] -&gt; byte[]" Usage="keyVaultKeyWrapProvider.UnwrapKey keyBytes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.KeyVaultExtensions</AssemblyName>
        <AssemblyVersion>7.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyBytes" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="keyBytes">key to unwrap.</param>
        <summary>
            Unwrap a key.
            </summary>
        <returns>Unwrapped key.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">if <paramref name="keyBytes" />.Length == 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="WrapKey">
      <MemberSignature Language="C#" Value="public override byte[] WrapKey (byte[] keyBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] WrapKey(unsigned int8[] keyBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.KeyVaultExtensions.KeyVaultKeyWrapProvider.WrapKey(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function WrapKey (keyBytes As Byte()) As Byte()" />
      <MemberSignature Language="F#" Value="override this.WrapKey : byte[] -&gt; byte[]" Usage="keyVaultKeyWrapProvider.WrapKey keyBytes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.KeyVaultExtensions</AssemblyName>
        <AssemblyVersion>7.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyBytes" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="keyBytes">the key to be wrapped</param>
        <summary>
            Wrap a key.
            </summary>
        <returns>wrapped key.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">if <paramref name="keyBytes" />.Length == 0.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
