<Type Name="AuthenticatedEncryptionProvider" FullName="Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider">
  <TypeSignature Language="C#" Value="public class AuthenticatedEncryptionProvider : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AuthenticatedEncryptionProvider extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class AuthenticatedEncryptionProvider&#xA;Implements IDisposable" />
  <TypeSignature Language="F#" Value="type AuthenticatedEncryptionProvider = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
    <AssemblyVersion>6.27.0.0</AssemblyVersion>
    <AssemblyVersion>6.28.1.0</AssemblyVersion>
    <AssemblyVersion>6.29.0.0</AssemblyVersion>
    <AssemblyVersion>6.30.0.0</AssemblyVersion>
    <AssemblyVersion>6.30.1.0</AssemblyVersion>
    <AssemblyVersion>6.31.0.0</AssemblyVersion>
    <AssemblyVersion>6.32.0.0</AssemblyVersion>
    <AssemblyVersion>6.32.1.0</AssemblyVersion>
    <AssemblyVersion>6.32.2.0</AssemblyVersion>
    <AssemblyVersion>6.32.3.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.2.0</AssemblyVersion>
    <AssemblyVersion>7.0.3.0</AssemblyVersion>
    <AssemblyVersion>7.2.0.0</AssemblyVersion>
    <AssemblyVersion>7.3.1.0</AssemblyVersion>
    <AssemblyVersion>7.4.0.0</AssemblyVersion>
    <AssemblyVersion>7.4.1.0</AssemblyVersion>
    <AssemblyVersion>7.5.0.0</AssemblyVersion>
    <AssemblyVersion>7.5.1.0</AssemblyVersion>
    <AssemblyVersion>7.5.2.0</AssemblyVersion>
    <AssemblyVersion>7.6.0.0</AssemblyVersion>
    <AssemblyVersion>7.6.2.0</AssemblyVersion>
    <AssemblyVersion>7.6.3.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.1.0</AssemblyVersion>
    <AssemblyVersion>8.0.2.0</AssemblyVersion>
    <AssemblyVersion>8.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Provides authenticated encryption and decryption services.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AuthenticatedEncryptionProvider (Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider.#ctor(Microsoft.IdentityModel.Tokens.SecurityKey,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As SecurityKey, algorithm As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider : Microsoft.IdentityModel.Tokens.SecurityKey * string -&gt; Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider" Usage="new Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider (key, algorithm)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>8.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.IdentityModel.Tokens.SecurityKey" />
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> that will be used for crypto operations.</param>
        <param name="algorithm">The encryption algorithm to be used.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider" /> class used for encryption and decryption.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="algorithm" /> is null or whitespace.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the key size is not large enough.</exception>
        <exception cref="T:System.ArgumentException">Thrown if a symmetricSignatureProvider is not created.</exception>
      </Docs>
    </Member>
    <Member MemberName="Algorithm">
      <MemberSignature Language="C#" Value="public string Algorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Algorithm" />
      <MemberSignature Language="DocId" Value="P:Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider.Algorithm" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Algorithm As String" />
      <MemberSignature Language="F#" Value="member this.Algorithm : string" Usage="Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider.Algorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>8.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the encryption algorithm that is being used.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public string Context { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Context" />
      <MemberSignature Language="DocId" Value="P:Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider.Context" />
      <MemberSignature Language="VB.NET" Value="Public Property Context As String" />
      <MemberSignature Language="F#" Value="member this.Context : string with get, set" Usage="Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>8.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a user context for a <see cref="T:Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider" />.
            </summary>
        <value>To be added.</value>
        <remarks>This is null by default. This can be used by applications for extensibility scenarios.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decrypt">
      <MemberSignature Language="C#" Value="public virtual byte[] Decrypt (byte[] ciphertext, byte[] authenticatedData, byte[] iv, byte[] authenticationTag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] Decrypt(unsigned int8[] ciphertext, unsigned int8[] authenticatedData, unsigned int8[] iv, unsigned int8[] authenticationTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider.Decrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Decrypt (ciphertext As Byte(), authenticatedData As Byte(), iv As Byte(), authenticationTag As Byte()) As Byte()" />
      <MemberSignature Language="F#" Value="abstract member Decrypt : byte[] * byte[] * byte[] * byte[] -&gt; byte[]&#xA;override this.Decrypt : byte[] * byte[] * byte[] * byte[] -&gt; byte[]" Usage="authenticatedEncryptionProvider.Decrypt (ciphertext, authenticatedData, iv, authenticationTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>8.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ciphertext" Type="System.Byte[]" />
        <Parameter Name="authenticatedData" Type="System.Byte[]" />
        <Parameter Name="iv" Type="System.Byte[]" />
        <Parameter Name="authenticationTag" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="ciphertext">The encrypted text to be decrypted.</param>
        <param name="authenticatedData">The authenticate data that is used in verification.</param>
        <param name="iv">The initialization vector used when creating the ciphertext.</param>
        <param name="authenticationTag">The authentication tag that was created during the encyption.</param>
        <summary>
            Decrypts ciphertext into plaintext.
            </summary>
        <returns>The decrypted ciphertext.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="authenticationTag" /> is null or empty.</exception>
        <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenDecryptionFailedException">Thrown if the AES crypto operation threw. See inner exception for details.</exception>
        <exception cref="T:System.ObjectDisposedException">Thrown if the internal <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" /> is disposed.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="authenticatedEncryptionProvider.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>8.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Calls <see cref="M:Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider.Dispose(System.Boolean)" /> and <see cref="M:System.GC.SuppressFinalize(System.Object)" /></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="authenticatedEncryptionProvider.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>8.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">true, if called from Dispose(), false, if invoked inside a finalizer.</param>
        <summary>
            Releases managed resources.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encrypt">
      <MemberSignature Language="C#" Value="public virtual Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionResult Encrypt (byte[] plaintext, byte[] authenticatedData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionResult Encrypt(unsigned int8[] plaintext, unsigned int8[] authenticatedData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider.Encrypt(System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Encrypt (plaintext As Byte(), authenticatedData As Byte()) As AuthenticatedEncryptionResult" />
      <MemberSignature Language="F#" Value="abstract member Encrypt : byte[] * byte[] -&gt; Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionResult&#xA;override this.Encrypt : byte[] * byte[] -&gt; Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionResult" Usage="authenticatedEncryptionProvider.Encrypt (plaintext, authenticatedData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>8.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="plaintext" Type="System.Byte[]" />
        <Parameter Name="authenticatedData" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="plaintext">The data to be encrypted.</param>
        <param name="authenticatedData">Will be combined with the initialization vector and ciphertext to create an authentication tag.</param>
        <summary>
            Encrypts the specified plaintext.
            </summary>
        <returns>A <see cref="T:Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionResult" /> the containing ciphertext, initialization vector, the and authentication tag.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="authenticatedData" /> is null or empty.</exception>
        <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenEncryptionFailedException">Thrown if AES crypto operation threw. See inner exception for details.</exception>
        <exception cref="T:System.ObjectDisposedException">Thrown if the internal <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" /> is disposed.</exception>
      </Docs>
    </Member>
    <Member MemberName="Encrypt">
      <MemberSignature Language="C#" Value="public virtual Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionResult Encrypt (byte[] plaintext, byte[] authenticatedData, byte[] iv);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionResult Encrypt(unsigned int8[] plaintext, unsigned int8[] authenticatedData, unsigned int8[] iv) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider.Encrypt(System.Byte[],System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Encrypt (plaintext As Byte(), authenticatedData As Byte(), iv As Byte()) As AuthenticatedEncryptionResult" />
      <MemberSignature Language="F#" Value="abstract member Encrypt : byte[] * byte[] * byte[] -&gt; Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionResult&#xA;override this.Encrypt : byte[] * byte[] * byte[] -&gt; Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionResult" Usage="authenticatedEncryptionProvider.Encrypt (plaintext, authenticatedData, iv)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>8.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="plaintext" Type="System.Byte[]" />
        <Parameter Name="authenticatedData" Type="System.Byte[]" />
        <Parameter Name="iv" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="plaintext">The data to be encrypted.</param>
        <param name="iv">The initialization vector to be used with the encryption algorithm.</param>
        <param name="authenticatedData">Will be combined with the initialization vector and ciphertext to create an authentication tag.</param>
        <summary>
            Encrypts the specified plaintext.
            </summary>
        <returns>A <see cref="T:Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionResult" /> containing the ciphertext, initialization vector, and the authentication tag.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="authenticatedData" /> is null or empty.</exception>
        <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenEncryptionFailedException">Thrown if AES crypto operation threw. See inner exception for details.</exception>
        <exception cref="T:System.ObjectDisposedException">Thrown if the internal <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" /> is disposed.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetKeyBytes">
      <MemberSignature Language="C#" Value="protected virtual byte[] GetKeyBytes (Microsoft.IdentityModel.Tokens.SecurityKey key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] GetKeyBytes(class Microsoft.IdentityModel.Tokens.SecurityKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider.GetKeyBytes(Microsoft.IdentityModel.Tokens.SecurityKey)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetKeyBytes (key As SecurityKey) As Byte()" />
      <MemberSignature Language="F#" Value="abstract member GetKeyBytes : Microsoft.IdentityModel.Tokens.SecurityKey -&gt; byte[]&#xA;override this.GetKeyBytes : Microsoft.IdentityModel.Tokens.SecurityKey -&gt; byte[]" Usage="authenticatedEncryptionProvider.GetKeyBytes key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>8.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.IdentityModel.Tokens.SecurityKey" />
      </Parameters>
      <Docs>
        <param name="key">The <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> that will be used to obtain the byte[].</param>
        <summary>
            Called to obtain the byte[] needed to create a <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" />.
            </summary>
        <returns>
          <see cref="T:System.Byte" />[] that is used to populated the KeyedHashAlgorithm.</returns>
        <remarks>
          <see cref="T:Microsoft.IdentityModel.Tokens.SymmetricSecurityKey" /> and <see cref="T:Microsoft.IdentityModel.Tokens.JsonWebKey" /> are supported.
            <para>For a <see cref="T:Microsoft.IdentityModel.Tokens.SymmetricSecurityKey" />, <see cref="P:Microsoft.IdentityModel.Tokens.SymmetricSecurityKey.Key" /> is returned</para><para>For a <see cref="T:Microsoft.IdentityModel.Tokens.JsonWebKey" />, <see cref="M:Microsoft.IdentityModel.Tokens.Base64UrlEncoder.DecodeBytes(System.String)" /> is called with <see cref="P:Microsoft.IdentityModel.Tokens.JsonWebKey.K" /> if <see cref="P:Microsoft.IdentityModel.Tokens.JsonWebKey.Kty" /> == JsonWebAlgorithmsKeyTypes.Octet.</para></remarks>
        <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="key" /> is null.</exception>
        <exception cref="T:System.ArgumentException">Thrown if a byte[] can not be obtained from SecurityKey.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSupportedAlgorithm">
      <MemberSignature Language="C#" Value="protected virtual bool IsSupportedAlgorithm (Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsSupportedAlgorithm(class Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider.IsSupportedAlgorithm(Microsoft.IdentityModel.Tokens.SecurityKey,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsSupportedAlgorithm (key As SecurityKey, algorithm As String) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsSupportedAlgorithm : Microsoft.IdentityModel.Tokens.SecurityKey * string -&gt; bool&#xA;override this.IsSupportedAlgorithm : Microsoft.IdentityModel.Tokens.SecurityKey * string -&gt; bool" Usage="authenticatedEncryptionProvider.IsSupportedAlgorithm (key, algorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>8.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.IdentityModel.Tokens.SecurityKey" />
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" />.</param>
        <param name="algorithm">The algorithm to check.</param>
        <summary>
            Checks if the key/algorithm pair is supported.
            </summary>
        <returns>
          <see langword="true" /> if the key/algorithm pair is supported.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public Microsoft.IdentityModel.Tokens.SecurityKey Key { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.IdentityModel.Tokens.SecurityKey Key" />
      <MemberSignature Language="DocId" Value="P:Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider.Key" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Key As SecurityKey" />
      <MemberSignature Language="F#" Value="member this.Key : Microsoft.IdentityModel.Tokens.SecurityKey" Usage="Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider.Key" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>8.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.IdentityModel.Tokens.SecurityKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> that is being used.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateKeySize">
      <MemberSignature Language="C#" Value="protected virtual void ValidateKeySize (Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ValidateKeySize(class Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider.ValidateKeySize(Microsoft.IdentityModel.Tokens.SecurityKey,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ValidateKeySize (key As SecurityKey, algorithm As String)" />
      <MemberSignature Language="F#" Value="abstract member ValidateKeySize : Microsoft.IdentityModel.Tokens.SecurityKey * string -&gt; unit&#xA;override this.ValidateKeySize : Microsoft.IdentityModel.Tokens.SecurityKey * string -&gt; unit" Usage="authenticatedEncryptionProvider.ValidateKeySize (key, algorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>8.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.IdentityModel.Tokens.SecurityKey" />
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> that contains bytes.</param>
        <param name="algorithm">The encryption algorithm to be used.</param>
        <summary>
            Checks that the key has sufficient length.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="algorithm" /> is null or empty.</exception>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="algorithm" /> is not a supported algorithm.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
