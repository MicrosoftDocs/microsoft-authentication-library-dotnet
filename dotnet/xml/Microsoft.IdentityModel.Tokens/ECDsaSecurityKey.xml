<Type Name="ECDsaSecurityKey" FullName="Microsoft.IdentityModel.Tokens.ECDsaSecurityKey">
  <TypeSignature Language="C#" Value="public class ECDsaSecurityKey : Microsoft.IdentityModel.Tokens.AsymmetricSecurityKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ECDsaSecurityKey extends Microsoft.IdentityModel.Tokens.AsymmetricSecurityKey" />
  <TypeSignature Language="DocId" Value="T:Microsoft.IdentityModel.Tokens.ECDsaSecurityKey" />
  <TypeSignature Language="VB.NET" Value="Public Class ECDsaSecurityKey&#xA;Inherits AsymmetricSecurityKey" />
  <TypeSignature Language="F#" Value="type ECDsaSecurityKey = class&#xA;    inherit AsymmetricSecurityKey" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
    <AssemblyVersion>8.13.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.IdentityModel.Tokens.AsymmetricSecurityKey</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Represents a ECDsa security key.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDsaSecurityKey (System.Security.Cryptography.ECDsa ecdsa);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Cryptography.ECDsa ecdsa) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.ECDsaSecurityKey.#ctor(System.Security.Cryptography.ECDsa)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ecdsa As ECDsa)" />
      <MemberSignature Language="F#" Value="new Microsoft.IdentityModel.Tokens.ECDsaSecurityKey : System.Security.Cryptography.ECDsa -&gt; Microsoft.IdentityModel.Tokens.ECDsaSecurityKey" Usage="new Microsoft.IdentityModel.Tokens.ECDsaSecurityKey ecdsa" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>8.13.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ecdsa" Type="System.Security.Cryptography.ECDsa" />
      </Parameters>
      <Docs>
        <param name="ecdsa">The <see cref="P:Microsoft.IdentityModel.Tokens.ECDsaSecurityKey.ECDsa" />.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.IdentityModel.Tokens.ECDsaSecurityKey" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanComputeJwkThumbprint">
      <MemberSignature Language="C#" Value="public override bool CanComputeJwkThumbprint ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanComputeJwkThumbprint() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.ECDsaSecurityKey.CanComputeJwkThumbprint" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanComputeJwkThumbprint () As Boolean" />
      <MemberSignature Language="F#" Value="override this.CanComputeJwkThumbprint : unit -&gt; bool" Usage="eCDsaSecurityKey.CanComputeJwkThumbprint " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>8.13.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Determines whether the <see cref="T:Microsoft.IdentityModel.Tokens.ECDsaSecurityKey" /> can compute a JWK thumbprint.
            </summary>
        <returns>
          <see langword="true" /> if JWK thumbprint can be computed; otherwise, <see langword="false" />.</returns>
        <remarks>See: <see href="https://datatracker.ietf.org/doc/html/rfc7638" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComputeJwkThumbprint">
      <MemberSignature Language="C#" Value="public override byte[] ComputeJwkThumbprint ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] ComputeJwkThumbprint() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.ECDsaSecurityKey.ComputeJwkThumbprint" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ComputeJwkThumbprint () As Byte()" />
      <MemberSignature Language="F#" Value="override this.ComputeJwkThumbprint : unit -&gt; byte[]" Usage="eCDsaSecurityKey.ComputeJwkThumbprint " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>8.13.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Computes a SHA256 hash over the <see cref="T:Microsoft.IdentityModel.Tokens.ECDsaSecurityKey" />.
            </summary>
        <returns>A JWK thumbprint.</returns>
        <remarks>See: <see href="https://datatracker.ietf.org/doc/html/rfc7638" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ECDsa">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.ECDsa ECDsa { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.ECDsa ECDsa" />
      <MemberSignature Language="DocId" Value="P:Microsoft.IdentityModel.Tokens.ECDsaSecurityKey.ECDsa" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ECDsa As ECDsa" />
      <MemberSignature Language="F#" Value="member this.ECDsa : System.Security.Cryptography.ECDsa" Usage="Microsoft.IdentityModel.Tokens.ECDsaSecurityKey.ECDsa" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>8.13.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDsa</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The <see cref="P:Microsoft.IdentityModel.Tokens.ECDsaSecurityKey.ECDsa" /> instance used to initialize the key.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPrivateKey">
      <MemberSignature Language="C#" Value="public override bool HasPrivateKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasPrivateKey" />
      <MemberSignature Language="DocId" Value="P:Microsoft.IdentityModel.Tokens.ECDsaSecurityKey.HasPrivateKey" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HasPrivateKey As Boolean" />
      <MemberSignature Language="F#" Value="member this.HasPrivateKey : bool" Usage="Microsoft.IdentityModel.Tokens.ECDsaSecurityKey.HasPrivateKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>8.13.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("HasPrivateKey method is deprecated, please use FoundPrivateKey instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("HasPrivateKey method is deprecated, please use FoundPrivateKey instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a bool indicating if a private key exists.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <return>
          <see langword="true" /> if it has a private key; otherwise, <see langword="false" />.</return>
      </Docs>
    </Member>
    <Member MemberName="KeySize">
      <MemberSignature Language="C#" Value="public override int KeySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeySize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.IdentityModel.Tokens.ECDsaSecurityKey.KeySize" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property KeySize As Integer" />
      <MemberSignature Language="F#" Value="member this.KeySize : int" Usage="Microsoft.IdentityModel.Tokens.ECDsaSecurityKey.KeySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>8.13.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="P:Microsoft.IdentityModel.Tokens.ECDsaSecurityKey.ECDsa" /> key size.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrivateKeyStatus">
      <MemberSignature Language="C#" Value="public override Microsoft.IdentityModel.Tokens.PrivateKeyStatus PrivateKeyStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.IdentityModel.Tokens.PrivateKeyStatus PrivateKeyStatus" />
      <MemberSignature Language="DocId" Value="P:Microsoft.IdentityModel.Tokens.ECDsaSecurityKey.PrivateKeyStatus" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property PrivateKeyStatus As PrivateKeyStatus" />
      <MemberSignature Language="F#" Value="member this.PrivateKeyStatus : Microsoft.IdentityModel.Tokens.PrivateKeyStatus" Usage="Microsoft.IdentityModel.Tokens.ECDsaSecurityKey.PrivateKeyStatus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>8.13.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.IdentityModel.Tokens.PrivateKeyStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value indicating the existence of the private key.
            </summary>
        <value>
          <see cref="F:Microsoft.IdentityModel.Tokens.PrivateKeyStatus.Exists" /> if the private key exists.
            <see cref="F:Microsoft.IdentityModel.Tokens.PrivateKeyStatus.DoesNotExist" /> if the private key does not exist.
            <see cref="F:Microsoft.IdentityModel.Tokens.PrivateKeyStatus.Unknown" /> if the existence of the private key cannot be determined.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
